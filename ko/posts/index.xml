<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hwajin's Blog</title><link>https://blog.hwajin.me/ko/posts/</link><description>Recent content in Posts on Hwajin's Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Wed, 10 Jan 2024 00:52:00 +0000</lastBuildDate><atom:link href="https://blog.hwajin.me/ko/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode - 215.Kth Largest Element in an Array</title><link>https://blog.hwajin.me/ko/posts/2024/01/10/leetcode-215-kth-largest-element-in-an-array/</link><pubDate>Wed, 10 Jan 2024 00:52:00 +0000</pubDate><guid>https://blog.hwajin.me/ko/posts/2024/01/10/leetcode-215-kth-largest-element-in-an-array/</guid><description>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
Can you solve it without sorting?&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;p>Input: nums = [3,2,1,5,6,4], k = 2
Output: 5&lt;/p>
&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;p>Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>정렬을 사용하지 못한다. 우선 나는 $$-10^4 &amp;lt;= N &amp;lt;= 10^4$$ 가 보장되었다 하였으니, 공간복잡도를 포기하고 풀었다. $$O(2n)$$&lt;/p></description><content>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
Can you solve it without sorting?&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;p>Input: nums = [3,2,1,5,6,4], k = 2
Output: 5&lt;/p>
&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;p>Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>정렬을 사용하지 못한다. 우선 나는 $$-10^4 &amp;lt;= N &amp;lt;= 10^4$$ 가 보장되었다 하였으니, 공간복잡도를 포기하고 풀었다. $$O(2n)$$&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> MAGIC &lt;span style="color:#f92672">=&lt;/span> 10000;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">findKthLargest&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums, &lt;span style="color:#66d9ef">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> order &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>20001&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> num : nums) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order&lt;span style="color:#f92672">[&lt;/span>num &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0 &lt;span style="color:#f92672">?&lt;/span> (num &lt;span style="color:#f92672">+&lt;/span> MAGIC) : num &lt;span style="color:#f92672">+&lt;/span> MAGIC&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> order.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1, m &lt;span style="color:#f92672">=&lt;/span> k, s &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> 0; &lt;span style="color:#f92672">--&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (order&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">-=&lt;/span> order&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (m &lt;span style="color:#f92672">&amp;lt;=&lt;/span> 0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> MAGIC &lt;span style="color:#f92672">?&lt;/span> i &lt;span style="color:#f92672">-&lt;/span> MAGIC : i &lt;span style="color:#f92672">-&lt;/span> MAGIC;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>도메인 주도 설계의 Aggregate Root를 설계하고 유지하는 법</title><link>https://blog.hwajin.me/ko/posts/2022/05/06/design-and-management-of-aggregate-root-ddd/</link><pubDate>Fri, 06 May 2022 00:35:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/05/06/design-and-management-of-aggregate-root-ddd/</guid><description>&lt;h2 id="코드의-생명-주기lifecycle">코드의 생명 주기(Lifecycle)&lt;/h2>
&lt;p>코드 또한 여러 이유에 의해 생성과 소멸을 반복합니다. 우리는 코드에 녹여내는 현실이 이미 과거라는 사실을 알고 있습니다. 이것은 정적인 코드가 표현할 수 있는 한계이며, 많은 경우 이런 생명 주기의 연장을 위해 &amp;ldquo;미래를 위한 설계&amp;quot;따위를 실천하고는 합니다. 그러나, 이 방식은 위험한 결과를 야기할 수 있는 접근법입니다. 비즈니스는 격동적이며, 우리의 코드도 격동적으로 변화하고 진화할 것입니다. 코드는 이러한 비즈니스의 생명 주기와 깊은 연관을 가지고, 어느 때에 사용할 법한 미래를 위한 설계는 많은 경우 의도치 않은 방향으로 사용되어 버리거나, 아니면 애초에 사용할 기회를 얻지 못합니다. 설령 같은 프로젝트의 같은 기획자, 개발자가 만들어 내는 서비스라도 그러합니다! 그리고 이러한 요구사항의 변화는 전혀 이상하거나 잘못된 것이 아닙니다.&lt;/p></description><content>&lt;h2 id="코드의-생명-주기lifecycle">코드의 생명 주기(Lifecycle)&lt;/h2>
&lt;p>코드 또한 여러 이유에 의해 생성과 소멸을 반복합니다. 우리는 코드에 녹여내는 현실이 이미 과거라는 사실을 알고 있습니다. 이것은 정적인 코드가 표현할 수 있는 한계이며, 많은 경우 이런 생명 주기의 연장을 위해 &amp;ldquo;미래를 위한 설계&amp;quot;따위를 실천하고는 합니다. 그러나, 이 방식은 위험한 결과를 야기할 수 있는 접근법입니다. 비즈니스는 격동적이며, 우리의 코드도 격동적으로 변화하고 진화할 것입니다. 코드는 이러한 비즈니스의 생명 주기와 깊은 연관을 가지고, 어느 때에 사용할 법한 미래를 위한 설계는 많은 경우 의도치 않은 방향으로 사용되어 버리거나, 아니면 애초에 사용할 기회를 얻지 못합니다. 설령 같은 프로젝트의 같은 기획자, 개발자가 만들어 내는 서비스라도 그러합니다! 그리고 이러한 요구사항의 변화는 전혀 이상하거나 잘못된 것이 아닙니다.&lt;/p>
&lt;p>이러한 생명 주기를 파악하고, 분석해서 현재 도메인에 가장 잘 맞는 객체를 설계하는 것, 이것이 우리가 지향할 목표입니다. 미래를 위한 무언가는, 적절한 책임을 가진 객체와, 확장에 열려있는 소프트웨어, 명세의 분리와 추상화에 의존하는 기술로 달성할 수 있습니다. 레거시라 불려오는 거대한 무언가는 객체의 기능에 &amp;ldquo;미래에 쓸법한 기능&amp;quot;을 많이 만들어두지 않아서가 아닌, 뒤섞인 의존 관계와 수정하기에 너무 거대하기 짝이 없는 코드로부터 비롯됩니다. 그러니까, 마치 이건 &lt;em>Too big to fail&lt;/em> 같은 겁니다.&lt;/p>
&lt;p>어렴풋 알 수 있듯, 코드의 생명 주기라 하면 비즈니스의 발전 속도, 방향에 지대한 영향을 받습니다. 그렇다면, 우리는 코드의 생명 주기와 객체의 응집도와 결합도에 가장 큰 영향을 미치며 이러한 객체, 코드를 설계할 때 가장 중요시 여겨야 하는 것은 바로 이런 &amp;ldquo;생명 주기&amp;rdquo; 를 공유하는 시스템을 개발하는 것이라는 사실이 나름 자명해집니다.&lt;/p>
&lt;h2 id="작은-객체">작은 객체&lt;/h2>
&lt;p>객체를 설계함에 있어 거대한 객체는 필연적으로 문제를 야기시킵니다. 사실, 큰 객체 자체만으로도 이미 설계에 지대한 문제가 있다는 것을 방증합니다. 예를 들어, 여러분이 주문을 관리하는 Aggregate Root 를 설계한다고 가정합시다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@AggregateRoot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 내부에는 수 많은 로직이 있을 것이다.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>주문 Aggregate root 는 어떤 영역부터 어떤 영역까지를 담당해야 하나요? 정답은 없습니다. 그러나, 작을 수록 좋습니다. Aggregate Root, 다른 객체를 설계하는 기본 개념은 쪼갤 수 없는 단위까지 쪼갠 무언가를 표현하는 것입니다. 많은 Microservice arch, 기타 등등의 조금은 핫하다라 불리우는 시스템이 오히려 복잡도를 가중시키는 이유는 이런 근본 원칙을 무시한 채 개발하고 있기 때문입니다. 도메인 주도 설계에서 큰 Aggregate Root는 너무 많은 문제를 수반시킵니다. 설령 그 객체가 논리적으로 보았을 때 &amp;ldquo;응집도 높은&amp;quot;코드라 하여도 말입니다.&lt;/p>
&lt;p>도메인 로직이 존재해야 하는 곳은 Domain Layer이고, 각 도메인의 Aggregate Root는 이를 모두 담당하게 되어 있습니다. 이러한 설계에서, 객체에 많은 책임을 부여하거나, 설령 적은 책임에 많은 기능을 부여하여도 Aggregate Root는 이미 우리가 관리할 수 있는 범주를 넘어설 것입니다.&lt;/p>
&lt;p>작은 객체를 설계할 수 없는 때는 분명 존재합니다. 이것은 당연한 일입니다. 그러나 Method(Aggregate Root의 관점에서, 비즈니스 로직의 행위)의 구현은 객체간의 협력으로 달성시킬 수 있습니다. 무상태 객체에 해당하는 Domain Service는, 어쩌면 여러분의 이런 문제점을 해결시켜 줄 수 있는 하나의 방법이 될 수 있습니다.&lt;/p>
&lt;h2 id="작게-만들-수-없는-설계">작게 만들 수 없는 설계&lt;/h2>
&lt;p>하나의 Aggregate Root를 가지고 여러 시스템이 협력하는 일은 매우 빈번한 작업입니다. Batch와 같은 경우는 Aggregate Root로서 관리하기에 너무나 어렵고, 실제로 그러한 작업을 권장하지는 않습니다. 그러나, Administrator API &amp;lt;-&amp;gt; User API 가 같은 Aggregate Root를 쓰는 경우는 복잡도가 높아질 수 있습니다.&lt;/p>
&lt;p>정답은 아닙니다만, 저는 세 가지 대안을 보통 제시합니다.&lt;/p>
&lt;ol>
&lt;li>Aggregate Root에 최대한 추가&lt;/li>
&lt;li>Domain Service로 분리&lt;/li>
&lt;li>Aggregate Root분리&lt;/li>
&lt;/ol>
&lt;h3 id="aggregate-root에-최대한-추가">Aggregate Root에 최대한 추가&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addInformation&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">removeInformation&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 방법은 매우 보편적인 방식입니다. 행위가 많아진다는 단점이 있지만, 객체가 자신의 행위를 공개함으로서 얻는 이점은 무척 크다고 생각합니다. 예를 들어 봅시다. 좋은 코드란, 코드 스스로가 행위와 결과를 서술할 수 있어야 합니다. 코드를 마치 시처럼, 글처럼 읽을 수 있어야 하고, 이를 다른 개발자가 사전에 필요한 지식 없이 이해할 수 있어야 합니다 &lt;em>(무척 힘들지만, 그걸 목표로 하는 것입니다)&lt;/em>&lt;/p>
&lt;p>자, 위 코드에서 &lt;code>public&lt;/code> 을 통해 이 행위를 외부에 공개했습니다. 이는 당연, 외부에서 사용할 수 있고 사용해야 하는 행위임을 의미합니다. &lt;code>void&lt;/code> 를 통해 우리는 이 행위를 통해 그 어떤 정보도 추가로 받아올 수 없음을 알았습니다. 그리고, 행위의 이름에 그 명확한 요소가 있습니다.&lt;/p>
&lt;p>제가 제시하는 3가지 방법 모두 Aggregate Root에 Method를 추가해야 하는 것은 맞습니다만, 이 방법을 따로 소개하는 이유는 Aggregate Root에 있는 로직을 직접 호출한다는 점이 다른 두 방식과 조금 상이합니다.&lt;/p>
&lt;h3 id="domain-service를-이용한-분리">Domain Service를 이용한 분리&lt;/h3>
&lt;p>Domain Service 는 아주 특수한 용도의 Service 객체입니다. 스스로 상태를 관리하지 않으며, &lt;code>Aggregate Root&lt;/code> 를 외부에서 주입 받아 사용합니다. 마치 State machine pattern 과 유사하게 동작합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserManagementService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">removeInformation&lt;/span>(&lt;span style="color:#a6e22e">@Nonnull&lt;/span> User user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user.&lt;span style="color:#a6e22e">removeInformation&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@AggregateRoot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Information information;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">removeInformation&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">information&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이런 방식을 사용하는 이유는, 여러분이 만약 복잡한 객체를 설계했다고 가정해봅시다. 여러분의 API는 보편적으로 관리용 API와 그렇지 않은 API 두 개를 가지고 있을 것입니다. 이는 혼용되어 사용될 가능성이 높습니다. 이러한 상황 속에서, 어떠한 행위는 그 호출을 명시적으로 제한해야 할 필요가 있을 수 있습니다.&lt;/p>
&lt;p>이러한 비즈니스 로직의 호출은 Application Layer가 담당하고, Application Layer는 호출의 정당성 &lt;em>(이 호출이 가능한가에 대한)&lt;/em> 검증을 실시함이 맞지만, 이를 도메인 로직에서 분리해야 할 상황은 현실에서 겪기 쉬운 이야기입니다. 그렇다면, 여러분은 User Aggregate Root의 행위를 은닉시키고, 호출의 책임을 &lt;code>UserManagementService&lt;/code> 로 넘길 수 있습니다. 이러한 구조는 이 코드(행위)의 소비자(호출)가 행위를 호출하는 시점에 이미 어느 정도의 정보를 알 수 있기에 꽤 괜찮은 방식이라 할 수 있을 것 같습니다. 물론, 이를 강하게 제한하고자 한다면 ArchUnit과 같은 아키텍처 테스트를 추가함이 좋습니다.&lt;/p>
&lt;p>물론 이 방법은 단점이 있습니다. 이러한 모든 작업은, 결국 &lt;code>User&lt;/code> Aggregate Root를 작업할 때 알 수 없다는 것입니다. 필연적으로, 우리는 하나의 행위를 위해 두 번의 수정이 필요한 것입니다. 이게 좋은 패턴일까요? 합리적인 선택 속에서, 이는 그저 하나의 선택지일 뿐입니다.&lt;/p>
&lt;h3 id="aggregate-root의-분리">Aggregate Root의 분리&lt;/h3>
&lt;p>일단, 가장 쉬운 방식이며 가장 어려울 수 있는 방식입니다. 여러분의 Aggregate는 어쩌면 너무 비대한 객체가 되어버렸을 것입니다. 그렇다면, 우리가 취할 수 있는 &lt;em>어쩌면&lt;/em> 최선의 방식은 Aggregate Root를 아예 분리시키는 것입니다. 비대한 객체는 복잡도가 높습니다. 책임지는 영역도 넓습니다. 작은 객체 여럿은 서로간의 Integration이 어렵지만, 작게 유지시키는 것은 큰 가치가 있는 일입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@AggregateRoot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@AggregateRoot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@AggregateRoot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Information&lt;/span> {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>생명 주기를 공유하지 않는 선에서, 더 작게, 더 짧게 객체를 나누어 보세요. 물론, 이 방식은 필연적으로 서로간의 Integration을 요구한다는 점에서 구현에 신경쓸 부분이 많습니다. 그러나, 더 작은 객체는 사용하기 편합니다. 이해하기 쉽습니다. 여러분이 비대한 객체를 테스트한다 생각해보세요. 대부분, 하나의 객체가 많은 협력 관계나 필드가 많을 때 우리는 테스트에 어려움을 겪습니다. 이것을 개발 당시에 신경쓰지 않는 이유는 많은 경우 Spring IoC Container 따위를 통해 객체의 생성과 관리 책임을 위임하기 때문입니다. 이는 무척 멋진 기능이나, 이로 인해 초기화가 어려운 객체가 탄생해버립니다.&lt;/p>
&lt;p>그 모든 것들을 없애버리고, 맑은 시야에서 객체를 바라보자면, 복잡하고 책임이 많은 객체가 왜 좋지 않은지 알 수 있습니다. 특히, 영속화가 이루어지는 이러한 객체들은 더 복잡한 문제가 숨어 있습니다. 우리는 큰 객체를 다루면서, 데이터베이스의 최적화까지 고려해야 하는 운명에 마주합니다.&lt;/p>
&lt;h5 id="더-작게-때로는-기교를-부려가며">더 작게, 때로는 기교를 부려가며&lt;/h5>
&lt;p>&lt;code>@Inheritance&lt;/code> 어노테이션이나 &lt;code>@MappedSuperclass&lt;/code> 는 객체의 상속을 통해 객체지향적 관점에서 Application과 Domain을 설계할 수 있도록 도와줍니다. 서로 조금은 다른 Annotation이긴 하지만 일부 비슷한 구현이 있기에, &lt;code>Inheritance&lt;/code> 를 기준으로 설명드리겠습니다.&lt;/p>
&lt;p>외부에서 우리가 &lt;code>User&lt;/code> 를 바라볼 때 어떠한 관점에서 바라봅니까? 예를 들면, 여러분이 만약 서비스A의 사용자라 가정해봅시다. 서비스A는 커머스의 회원 시스템이며, 여러분은 이 회원 시스템에 로그인 후 자신의 이름, 생년월일등을 변경할 수 있습니다. 그런데, 여러분에게 이메일을 변경할 권한이 없다 가정해봅시다.&lt;/p>
&lt;p>그러나 대부분, 관리자는 이러한 기능을 제공하고 있습니다. 서로 같은 객체를 바라보나, 서로 상이한 비즈니스 로직이 포함되어 있다는 것입니다. 이러한 불일치는 현실 세계의 Application에서 익히 발생하는 매우 보편적인 문제입니다. 여러분의 Application이 작다면, 이러한 일은 큰 문제가 아닙니다. Aggregate Root 혼자 이 모든 로직을 담당해도 충분히 작고, 미치는 여파는 미미합니다. 그러나 대규모의, Aggregate Root가 &amp;ldquo;어쩔 도리 없이&amp;rdquo; 비대한 경우는 분명 존재합니다. 의도하였든, 의도하지 않았든 이러한 코드는 마주할 수 밖에 없습니다. 왜냐하면, 객체의 확장 가능성을 열어둔 시점에서 여러분은 미래 어느 시점에 이 객체의 &amp;ldquo;코드 레벨의 포화도&amp;quot;가 올라간다는 믿음이 있는 것이기 때문입니다. 아니라면, 여러분은 객체를 처음 구성한 그 순간 이미 완성되었음을 가정하고 &amp;ldquo;여기는 더 이상 수정하지 않아요!&amp;ldquo;따위의 말을 했겠죠.&lt;/p>
&lt;p>다행스럽게도, 객체 지향적 관점에서 상속은 많은 것을 해결해 줄 수 있습니다. 적어도 이 문제에서는, 상속 관계가 가지는 강한 의존성이 오히려 감사할 지경입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@AggregateRoot&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Inheritance&lt;/span>(strategy &lt;span style="color:#f92672">=&lt;/span> strategy &lt;span style="color:#f92672">=&lt;/span> InheritanceType.&lt;span style="color:#a6e22e">JOINED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@DiscriminatorColumn&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Getter&lt;/span>(access &lt;span style="color:#f92672">=&lt;/span> AccessType.&lt;span style="color:#a6e22e">PUBLIC&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> { &lt;span style="color:#75715e">// 객체의 접근을 제한한다.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> UserId id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AdminUser&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> User { &lt;span style="color:#75715e">// 관리자가 제어하는 유저&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">removeInformation&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Do something..&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="결국은-작게-쪼개야-한다">결국은 작게 쪼개야 한다&lt;/h2>
&lt;p>Aggregate Root의 복잡도는 필연적인 요소입니다. 복잡도를 측정하는 정량적 수치 &lt;em>(Cyclomatic Complexity 따위와 같은)&lt;/em> 가 &amp;ldquo;돌아올 수 없는 선&amp;quot;에 해당하는 역치를 만났을 때 우리는 이러한 설계의 개선을 추진해야 하는 나름의 의무를 지니고 있습니다. 이러한 복잡도 증가는 도메인 주도 설계가 지향하는, Aggregate Root를 통한 접근, 비즈니스 로직의 은닉화와 파편화의 제한에 해당하는 것을 우리가 현실의 복잡한 문제를 풀어내고자 할 때 발생하는 것이기에 언제나, 설령 작디 작은 서비스를 만드는 상황에도 발생합니다.&lt;/p>
&lt;p>복잡도를 풀어내는 많은 방법이 있습니다. Domain Event(Transaction Boundary는 다르지만 같은 Application에서 동작하도록)따위를 사용하거나, 그냥 &amp;ldquo;큰 객체&amp;quot;로 유지하는 방법도 좋은 방안이긴 합니다. 여러분의 복잡도를 잘 살펴보세요.&lt;/p>
&lt;p>작게 쪼개는 것은 어려운 일입니다. Tx Boundary 를 분리한다는 것은, Eventual consistency를 요구하는 Application을 설계한다는 것입니다. 전통적이고, 보수적이고, 안정적인 RDBMS의 Tx를 사용하지 않을 정도의 가치가 있는 작업이라면, 진행하세요.&lt;/p></content></item><item><title>Leetcode - Rotate Array</title><link>https://blog.hwajin.me/ko/posts/2022/04/29/leetcode-rotate-array/</link><pubDate>Fri, 29 Apr 2022 01:31:12 +0000</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/29/leetcode-rotate-array/</guid><description>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>Given an array, rotate the array to the right by &lt;code>k&lt;/code> steps, where &lt;code>k&lt;/code> is non-negative.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Constraints:&lt;/strong>&lt;/p></description><content>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>Given an array, rotate the array to the right by &lt;code>k&lt;/code> steps, where &lt;code>k&lt;/code> is non-negative.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Constraints:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= nums.length &amp;lt;= 10^5&lt;/code>&lt;/li>
&lt;li>&lt;code>-231 &amp;lt;= nums[i] &amp;lt;= 231 - 1&lt;/code>&lt;/li>
&lt;li>&lt;code>0 &amp;lt;= k &amp;lt;= 10^5&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Follow up:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Try to come up with as many solutions as you can. There are at least &lt;strong>three&lt;/strong> different ways to solve this problem.&lt;/li>
&lt;li>Could you do it in-place with &lt;code>O(1)&lt;/code> extra space?&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>자, 배열 &lt;code>[1,2,3,4,5,6,7]&lt;/code> 를 잘 살펴보자. &lt;code>k=3&lt;/code> 일 때, 결과가 &lt;code>[5,6,7,1,2,3,4]&lt;/code> 라면, &lt;code>1,2,3,4&lt;/code> 와 &lt;code>5,6,7&lt;/code> 을 따로 두고 생각할 수 있을 것이다.&lt;/p>
&lt;p>그렇다면, 극강의 꼼수를 부려볼 수 있다. 왜냐하면, 잘 봐라. &amp;ldquo;Rotate&amp;rdquo; 라고 하지 않는가. 일단 뒤집고 생각해보자.&lt;/p>
&lt;p>&lt;code>[7,6,5,4,3,2,1]&lt;/code> 를 잘 보면 해답이 보인다. 바로 &lt;code>k=3&lt;/code> 이라는 점에서, 우리는 이 뒤집어진 배열을 두 번만 더 뒤집으면 끝난다. 어딜 기점으로? &lt;code>k=3&lt;/code> 즉, &lt;code>k - 1&lt;/code> 을 기준으로.&lt;/p>
&lt;p>그런데, 놀랍게도 &lt;code>k&lt;/code> 는 &lt;code>10^5&lt;/code> 까지 입력을 받을 수 있다. 즉, &lt;code>nums.length&lt;/code> 보다 더 클 수 있다. 이러면 당연히 에러가 발생한다. 나머지 연산을 통해서 N값보다 클 때 언제나 N값으로 나눈 나머지, 즉 실제 우리가 회전시켜야 하는 수만 뽑아낼 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">rotate&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums, &lt;span style="color:#66d9ef">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (nums.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">==&lt;/span> 1 &lt;span style="color:#f92672">||&lt;/span> k &lt;span style="color:#f92672">==&lt;/span> nums.&lt;span style="color:#a6e22e">length&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(nums, 0, nums.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(nums, 0, k &lt;span style="color:#f92672">%&lt;/span> nums.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(nums, k &lt;span style="color:#f92672">%&lt;/span> nums.&lt;span style="color:#a6e22e">length&lt;/span>, nums.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> n, &lt;span style="color:#66d9ef">int&lt;/span> l, &lt;span style="color:#66d9ef">int&lt;/span> r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (l &lt;span style="color:#f92672">&amp;lt;&lt;/span> r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> tmp &lt;span style="color:#f92672">=&lt;/span> n&lt;span style="color:#f92672">[&lt;/span>l&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n&lt;span style="color:#f92672">[&lt;/span>l&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> n&lt;span style="color:#f92672">[&lt;/span>r&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n&lt;span style="color:#f92672">[&lt;/span>r&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>l;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>r;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>참고로 이 접근법은 엄청난 논쟁을 야기시킨 방법이었다.. 이 글 쓰면서 Solution 보고 알았다.&lt;/p></content></item><item><title>Leetcode - Merge Intervals</title><link>https://blog.hwajin.me/ko/posts/2022/04/06/leetcode-merge-intervals/</link><pubDate>Wed, 06 Apr 2022 23:29:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/06/leetcode-merge-intervals/</guid><description>&lt;p>Given an array of &lt;code>intervals&lt;/code> where &lt;code>intervals[i] = [starti, endi]&lt;/code>, merge all overlapping intervals, and return &lt;em>an array of the non-overlapping intervals that cover all the intervals in the input&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Constraints:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= intervals.length &amp;lt;= 104&lt;/code>&lt;/li>
&lt;li>&lt;code>intervals[i].length == 2&lt;/code>&lt;/li>
&lt;li>&lt;code>0 &amp;lt;= starti &amp;lt;= endi &amp;lt;= 104&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>&lt;code>[1,3], [2,4]&lt;/code> 와 같이 정렬되어 있을 때 &lt;code>[i][0]&lt;/code> 은 &lt;code>[i - 1][1]&lt;/code> 보다 작을 때 범위에 속한 것이니, 정렬만 있다면 문제가 없다.&lt;/p></description><content>&lt;p>Given an array of &lt;code>intervals&lt;/code> where &lt;code>intervals[i] = [starti, endi]&lt;/code>, merge all overlapping intervals, and return &lt;em>an array of the non-overlapping intervals that cover all the intervals in the input&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Constraints:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= intervals.length &amp;lt;= 104&lt;/code>&lt;/li>
&lt;li>&lt;code>intervals[i].length == 2&lt;/code>&lt;/li>
&lt;li>&lt;code>0 &amp;lt;= starti &amp;lt;= endi &amp;lt;= 104&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>&lt;code>[1,3], [2,4]&lt;/code> 와 같이 정렬되어 있을 때 &lt;code>[i][0]&lt;/code> 은 &lt;code>[i - 1][1]&lt;/code> 보다 작을 때 범위에 속한 것이니, 정렬만 있다면 문제가 없다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> 2) &lt;span style="color:#66d9ef">return&lt;/span> arr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arrays.&lt;span style="color:#a6e22e">sort&lt;/span>(arr, &lt;span style="color:#66d9ef">new&lt;/span> Comparator&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">compare&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">-&lt;/span> b&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> t &lt;span style="color:#f92672">=&lt;/span> 0, ok &lt;span style="color:#f92672">=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>t&lt;span style="color:#f92672">][&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>t&lt;span style="color:#f92672">][&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(arr&lt;span style="color:#f92672">[&lt;/span>t&lt;span style="color:#f92672">][&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>, arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>ok;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>ok&lt;span style="color:#f92672">][&lt;/span>2&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> 0, p &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (c &lt;span style="color:#f92672">&amp;lt;&lt;/span> ok) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">][&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1) { &lt;span style="color:#f92672">++&lt;/span>p; &lt;span style="color:#66d9ef">continue&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a&lt;span style="color:#f92672">[&lt;/span>c&lt;span style="color:#f92672">][&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">][&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a&lt;span style="color:#f92672">[&lt;/span>c&lt;span style="color:#f92672">][&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">][&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ArrayList 같이 &lt;code>List&lt;/code> 자료구조를 안써서 짜봤다.&lt;/p></content></item><item><title>Leetcode - Maximum Length of a Concatenated String with Unique Characters</title><link>https://blog.hwajin.me/ko/posts/2022/04/05/leetcode-maximum-length-of-a-concatenated-string-with-unique-characters/</link><pubDate>Wed, 06 Apr 2022 21:46:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/05/leetcode-maximum-length-of-a-concatenated-string-with-unique-characters/</guid><description>&lt;p>You are given an array of strings &lt;code>arr&lt;/code>. A string &lt;code>s&lt;/code> is formed by the &lt;strong>concatenation&lt;/strong> of a &lt;strong>subsequence&lt;/strong> of &lt;code>arr&lt;/code> that has &lt;strong>unique characters&lt;/strong>.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>maximum&lt;/strong> possible length&lt;/em> of &lt;code>s&lt;/code>.&lt;/p>
&lt;p>A &lt;strong>subsequence&lt;/strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: arr = [&amp;#34;un&amp;#34;,&amp;#34;iq&amp;#34;,&amp;#34;ue&amp;#34;]
Output: 4
Explanation: All the valid concatenations are:
- &amp;#34;&amp;#34;
- &amp;#34;un&amp;#34;
- &amp;#34;iq&amp;#34;
- &amp;#34;ue&amp;#34;
- &amp;#34;uniq&amp;#34; (&amp;#34;un&amp;#34; + &amp;#34;iq&amp;#34;)
- &amp;#34;ique&amp;#34; (&amp;#34;iq&amp;#34; + &amp;#34;ue&amp;#34;)
Maximum length is 4.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p></description><content>&lt;p>You are given an array of strings &lt;code>arr&lt;/code>. A string &lt;code>s&lt;/code> is formed by the &lt;strong>concatenation&lt;/strong> of a &lt;strong>subsequence&lt;/strong> of &lt;code>arr&lt;/code> that has &lt;strong>unique characters&lt;/strong>.&lt;/p>
&lt;p>Return &lt;em>the &lt;strong>maximum&lt;/strong> possible length&lt;/em> of &lt;code>s&lt;/code>.&lt;/p>
&lt;p>A &lt;strong>subsequence&lt;/strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: arr = [&amp;#34;un&amp;#34;,&amp;#34;iq&amp;#34;,&amp;#34;ue&amp;#34;]
Output: 4
Explanation: All the valid concatenations are:
- &amp;#34;&amp;#34;
- &amp;#34;un&amp;#34;
- &amp;#34;iq&amp;#34;
- &amp;#34;ue&amp;#34;
- &amp;#34;uniq&amp;#34; (&amp;#34;un&amp;#34; + &amp;#34;iq&amp;#34;)
- &amp;#34;ique&amp;#34; (&amp;#34;iq&amp;#34; + &amp;#34;ue&amp;#34;)
Maximum length is 4.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: arr = [&amp;#34;cha&amp;#34;,&amp;#34;r&amp;#34;,&amp;#34;act&amp;#34;,&amp;#34;ers&amp;#34;]
Output: 6
Explanation: Possible longest valid concatenations are &amp;#34;chaers&amp;#34; (&amp;#34;cha&amp;#34; + &amp;#34;ers&amp;#34;) and &amp;#34;acters&amp;#34; (&amp;#34;act&amp;#34; + &amp;#34;ers&amp;#34;).
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: arr = [&amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;]
Output: 26
Explanation: The only string in arr has all 26 characters.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Constraints:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= arr.length &amp;lt;= 16&lt;/code>&lt;/li>
&lt;li>&lt;code>1 &amp;lt;= arr[i].length &amp;lt;= 26&lt;/code>&lt;/li>
&lt;li>&lt;code>arr[i]&lt;/code> contains only lowercase English letters.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>면접때 못푼 문제 (..). 좀 고민하니까 풀리긴 했는데, 잊을만 할 때 다시 풀어봐야겠다. 우선, String 을 풀어서 문자로 바꿔야 한다. Bitmask 를 사용하면 추가 공간을 크게 잡아먹지 않는다.&lt;/p>
&lt;ol>
&lt;li>ASCII 코드상에서 a&lt;del>z는 26개. Java 의 int 는 32bit 라서 시프트 연산으로 a&lt;/del>z를 숫자로 변환 후 마스킹한다&lt;/li>
&lt;li>전부 마스킹 후 체크를 시작한다.&lt;/li>
&lt;li>지금 보는 노드보다 전의 노드는 볼 필요가 없다.&lt;/li>
&lt;li>하위 노드도 동일한 규칙을 가진다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">maxLength&lt;/span>(List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> val) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>val.&lt;span style="color:#a6e22e">size&lt;/span>()&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> val.&lt;span style="color:#a6e22e">size&lt;/span>(); &lt;span style="color:#f92672">++&lt;/span>i) arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> stringToBitmask(val.&lt;span style="color:#a6e22e">get&lt;/span>(i));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> check(arr, 0, 0, 0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">stringToBitmask&lt;/span>(String str) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> str.&lt;span style="color:#a6e22e">toCharArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> mask &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> item : arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((mask &lt;span style="color:#f92672">&amp;amp;&lt;/span> (1 &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> item &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>)) &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0) &lt;span style="color:#66d9ef">return&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mask &lt;span style="color:#f92672">+=&lt;/span> 1 &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (item &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mask;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">check&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> items, &lt;span style="color:#66d9ef">int&lt;/span> me, &lt;span style="color:#66d9ef">int&lt;/span> position, &lt;span style="color:#66d9ef">int&lt;/span> max) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> position; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> items.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((me &lt;span style="color:#f92672">&amp;amp;&lt;/span> items&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(max, check(items, me &lt;span style="color:#f92672">+&lt;/span> items&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> 1, Math.&lt;span style="color:#a6e22e">max&lt;/span>(max, Integer.&lt;span style="color:#a6e22e">bitCount&lt;/span>(me &lt;span style="color:#f92672">+&lt;/span> items&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>))));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img alt="Leetcode" src="https://user-images.githubusercontent.com/8151366/161979785-b54db03c-f35f-4bfb-baee-850687f29dfd.png">&lt;/p>
&lt;p>Leetcode 는 Runtime이 지맘대로라 믿을 수가 없다(..)&lt;/p>
&lt;p>백트래킹에 약해서 더 풀어봐야겠다. 사실 그래프 탐색 다 못하는편.&lt;/p></content></item><item><title>Leetcode - Average Salary Excluding the Minimum and Maximum Salary</title><link>https://blog.hwajin.me/ko/posts/2022/04/05/leetcode-average-salary-excluding-the-minimum-and-maximum-salary/</link><pubDate>Tue, 05 Apr 2022 23:41:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/05/leetcode-average-salary-excluding-the-minimum-and-maximum-salary/</guid><description>&lt;p>You are given an array of &lt;strong>unique&lt;/strong> integers &lt;code>salary&lt;/code> where &lt;code>salary[i]&lt;/code> is the salary of the &lt;code>ith&lt;/code>employee.&lt;/p>
&lt;p>Return &lt;em>the average salary of employees excluding the minimum and maximum salary&lt;/em>. Answers within &lt;code>10-5&lt;/code> of the actual answer will be accepted.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.
Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p></description><content>&lt;p>You are given an array of &lt;strong>unique&lt;/strong> integers &lt;code>salary&lt;/code> where &lt;code>salary[i]&lt;/code> is the salary of the &lt;code>ith&lt;/code>employee.&lt;/p>
&lt;p>Return &lt;em>the average salary of employees excluding the minimum and maximum salary&lt;/em>. Answers within &lt;code>10-5&lt;/code> of the actual answer will be accepted.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.
Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: salary = [1000,2000,3000]
Output: 2000.00000
Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.
Average salary excluding minimum and maximum salary is (2000) / 1 = 2000
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>첨에는 딱 중간 값만 뽑으면 TC가 $$O(n \log_n)$$ 이라서 개꿀 이랬는데 음~ 문제 읽고 바로 나의 착각이란걸 알았죠~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">average&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> salary) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> min &lt;span style="color:#f92672">=&lt;/span> Integer.&lt;span style="color:#a6e22e">MAX_VALUE&lt;/span>, max &lt;span style="color:#f92672">=&lt;/span> Integer.&lt;span style="color:#a6e22e">MIN_VALUE&lt;/span>, sl &lt;span style="color:#f92672">=&lt;/span> salary.&lt;span style="color:#a6e22e">length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> 0.&lt;span style="color:#a6e22e">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> sl; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">min&lt;/span>(min, salary&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(max, salary&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">+=&lt;/span> salary&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (s &lt;span style="color:#f92672">-&lt;/span> min &lt;span style="color:#f92672">-&lt;/span> max) &lt;span style="color:#f92672">/&lt;/span> (salary.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Count Odd Numbers in an Interval Range</title><link>https://blog.hwajin.me/ko/posts/2022/04/05/leetcode-count-odd-numbers-in-an-interval-range/</link><pubDate>Tue, 05 Apr 2022 23:41:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/05/leetcode-count-odd-numbers-in-an-interval-range/</guid><description>&lt;p>Given two non-negative integers &lt;code>low&lt;/code> and &lt;code>high&lt;/code>. Return the &lt;em>count of odd numbers between&lt;/em> &lt;code>low&lt;/code> &lt;em>and&lt;/em> &lt;code>high&lt;/code> &lt;em>(inclusive)&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>생각하지 않고 풀었다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">countOdds&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> low, &lt;span style="color:#66d9ef">int&lt;/span> high) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (low &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">==&lt;/span> 0) low &lt;span style="color:#f92672">+=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (high &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">==&lt;/span> 0) high &lt;span style="color:#f92672">-=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (high &lt;span style="color:#f92672">-&lt;/span> low &lt;span style="color:#f92672">==&lt;/span> 0) &lt;span style="color:#66d9ef">return&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ((high &lt;span style="color:#f92672">-&lt;/span> low) &lt;span style="color:#f92672">/&lt;/span> 2) &lt;span style="color:#f92672">+&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content>&lt;p>Given two non-negative integers &lt;code>low&lt;/code> and &lt;code>high&lt;/code>. Return the &lt;em>count of odd numbers between&lt;/em> &lt;code>low&lt;/code> &lt;em>and&lt;/em> &lt;code>high&lt;/code> &lt;em>(inclusive)&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>생각하지 않고 풀었다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">countOdds&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> low, &lt;span style="color:#66d9ef">int&lt;/span> high) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (low &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">==&lt;/span> 0) low &lt;span style="color:#f92672">+=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (high &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">==&lt;/span> 0) high &lt;span style="color:#f92672">-=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (high &lt;span style="color:#f92672">-&lt;/span> low &lt;span style="color:#f92672">==&lt;/span> 0) &lt;span style="color:#66d9ef">return&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ((high &lt;span style="color:#f92672">-&lt;/span> low) &lt;span style="color:#f92672">/&lt;/span> 2) &lt;span style="color:#f92672">+&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Add Two Numbers</title><link>https://blog.hwajin.me/ko/posts/2022/04/04/leetcode-add-two-numbers/</link><pubDate>Mon, 04 Apr 2022 23:18:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/04/leetcode-add-two-numbers/</guid><description>&lt;p>You are given two &lt;strong>non-empty&lt;/strong> linked lists representing two non-negative integers. The digits are stored in &lt;strong>reverse order&lt;/strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.&lt;/p>
&lt;p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p></description><content>&lt;p>You are given two &lt;strong>non-empty&lt;/strong> linked lists representing two non-negative integers. The digits are stored in &lt;strong>reverse order&lt;/strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.&lt;/p>
&lt;p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: l1 = [0], l2 = [0]
Output: [0]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>Reverse Order 라길래 멍청하게 처음에는 Stack 으로 짰다 (..). 무척이나 개발자 스럽게도 &lt;code>0&lt;/code> 번 인덱스를 고려한 것이었다. 제발 이런 멍청한 실수는 하지 말자.&lt;/p>
&lt;p>연결 리스트를 끝까지 탐색하며 더하면 끝.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.*;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ListNode &lt;span style="color:#a6e22e">addTwoNumbers&lt;/span>(ListNode l1, ListNode l2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode p1 &lt;span style="color:#f92672">=&lt;/span> l1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode p2 &lt;span style="color:#f92672">=&lt;/span> l2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ListNode(&lt;span style="color:#f92672">-&lt;/span>1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode ret &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> carry &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (p1 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">||&lt;/span> p2 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> val &lt;span style="color:#f92672">=&lt;/span> (p1 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> p1.&lt;span style="color:#a6e22e">val&lt;/span> : 0) &lt;span style="color:#f92672">+&lt;/span> (p2 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> p2.&lt;span style="color:#a6e22e">val&lt;/span> : 0) &lt;span style="color:#f92672">+&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ListNode(val &lt;span style="color:#f92672">%&lt;/span> 10);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> result.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> carry &lt;span style="color:#f92672">=&lt;/span> val &lt;span style="color:#f92672">/&lt;/span> 10;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (p1 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) p1 &lt;span style="color:#f92672">=&lt;/span> p1.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (p2 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) p2 &lt;span style="color:#f92672">=&lt;/span> p2.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (carry &lt;span style="color:#f92672">!=&lt;/span> 0) result.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ListNode(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ret.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Swap Nodes In Pairs</title><link>https://blog.hwajin.me/ko/posts/2022/04/04/leetcode-swap-nodes-in-pairs/</link><pubDate>Mon, 04 Apr 2022 23:18:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/04/leetcode-swap-nodes-in-pairs/</guid><description>&lt;p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list&amp;rsquo;s nodes (i.e., only nodes themselves may be changed.)&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: head = [1,2,3,4]
Output: [2,1,4,3]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: head = []
Output: []
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: head = [1]
Output: [1]
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>일단 통과했으니 올리고, 한 달 후에 다시 풀어봐야겠다. &lt;code>jump&lt;/code> 때문에 더러워졌어..&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ListNode &lt;span style="color:#a6e22e">swapPairs&lt;/span>(ListNode head) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode eNode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ListNode(&lt;span style="color:#f92672">-&lt;/span>1, head &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> head.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> head.&lt;span style="color:#a6e22e">next&lt;/span> : head);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode target &lt;span style="color:#f92672">=&lt;/span> head;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode before &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode jump &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (target &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">!=&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jump &lt;span style="color:#f92672">=&lt;/span> before;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> before &lt;span style="color:#f92672">=&lt;/span> target;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">=&lt;/span> target.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode temp &lt;span style="color:#f92672">=&lt;/span> target.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> before;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> before.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (jump &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) jump.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> target;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> eNode.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content>&lt;p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list&amp;rsquo;s nodes (i.e., only nodes themselves may be changed.)&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: head = [1,2,3,4]
Output: [2,1,4,3]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: head = []
Output: []
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: head = [1]
Output: [1]
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>일단 통과했으니 올리고, 한 달 후에 다시 풀어봐야겠다. &lt;code>jump&lt;/code> 때문에 더러워졌어..&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ListNode &lt;span style="color:#a6e22e">swapPairs&lt;/span>(ListNode head) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode eNode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ListNode(&lt;span style="color:#f92672">-&lt;/span>1, head &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> head.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> head.&lt;span style="color:#a6e22e">next&lt;/span> : head);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode target &lt;span style="color:#f92672">=&lt;/span> head;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode before &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode jump &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (target &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">!=&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jump &lt;span style="color:#f92672">=&lt;/span> before;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> before &lt;span style="color:#f92672">=&lt;/span> target;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">=&lt;/span> target.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListNode temp &lt;span style="color:#f92672">=&lt;/span> target.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> before;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> before.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (jump &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) jump.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> target;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> eNode.&lt;span style="color:#a6e22e">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Add Strings</title><link>https://blog.hwajin.me/ko/posts/2022/04/02/leetcode-add-strings/</link><pubDate>Sat, 02 Apr 2022 03:55:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/02/leetcode-add-strings/</guid><description>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>Given two non-negative integers, &lt;code>num1&lt;/code> and &lt;code>num2&lt;/code> represented as string, return &lt;em>the sum of&lt;/em> &lt;code>num1&lt;/code> &lt;em>and&lt;/em>&lt;code>num2&lt;/code> &lt;em>as a string&lt;/em>.&lt;/p>
&lt;p>You must solve the problem without using any built-in library for handling large integers (such as &lt;code>BigInteger&lt;/code>). &lt;strong>You must also not convert the inputs to integers directly.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: num1 = &amp;#34;11&amp;#34;, num2 = &amp;#34;123&amp;#34;
Output: &amp;#34;134&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: num1 = &amp;#34;456&amp;#34;, num2 = &amp;#34;77&amp;#34;
Output: &amp;#34;533&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: num1 = &amp;#34;0&amp;#34;, num2 = &amp;#34;0&amp;#34;
Output: &amp;#34;0&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>난이도 최하의 문제로 뒤에서 하나씩 더해가면 끝이다. 산수의 영역(..)&lt;/p></description><content>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>Given two non-negative integers, &lt;code>num1&lt;/code> and &lt;code>num2&lt;/code> represented as string, return &lt;em>the sum of&lt;/em> &lt;code>num1&lt;/code> &lt;em>and&lt;/em>&lt;code>num2&lt;/code> &lt;em>as a string&lt;/em>.&lt;/p>
&lt;p>You must solve the problem without using any built-in library for handling large integers (such as &lt;code>BigInteger&lt;/code>). &lt;strong>You must also not convert the inputs to integers directly.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: num1 = &amp;#34;11&amp;#34;, num2 = &amp;#34;123&amp;#34;
Output: &amp;#34;134&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: num1 = &amp;#34;456&amp;#34;, num2 = &amp;#34;77&amp;#34;
Output: &amp;#34;533&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: num1 = &amp;#34;0&amp;#34;, num2 = &amp;#34;0&amp;#34;
Output: &amp;#34;0&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>난이도 최하의 문제로 뒤에서 하나씩 더해가면 끝이다. 산수의 영역(..)&lt;/p>
&lt;ol>
&lt;li>&lt;code>num1&lt;/code> 의 마지막 원소와 &lt;code>num2&lt;/code> 의 마지막 원소를 더한다&lt;/li>
&lt;li>두 집합 모두 같은 방식으로 순회하며 더한다&lt;/li>
&lt;/ol>
&lt;p>더할 때 9를 초과하는 수가 나올 수 있다. 예를 들어 보자&lt;/p>
&lt;pre tabindex="0">&lt;code>num1 = &amp;#34;999&amp;#34;
num2 = &amp;#34;99999&amp;#34;
&lt;/code>&lt;/pre>&lt;p>이렇다면,&lt;/p>
&lt;pre tabindex="0">&lt;code>9 + 9 = 18
1 + 9 + 9 = 19
1 + 9 + 9 = 19
...
&lt;/code>&lt;/pre>&lt;p>그러니 10을 나눈 나머지를 값으로 쓰고, 나눈 값을 올린다. 뭐 편한대로 (..) 걍 1 올려도 상관 없고요. &lt;code>carry = twoSum &amp;gt; 9 ? 1 : 0;&lt;/code> 이래도 괜찮은데 뭐.. 내 취향은 아니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">addStrings&lt;/span>(String num1, String num2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> alpha &lt;span style="color:#f92672">=&lt;/span> num1.&lt;span style="color:#a6e22e">toCharArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> beta &lt;span style="color:#f92672">=&lt;/span> num2.&lt;span style="color:#a6e22e">toCharArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> alphaSize &lt;span style="color:#f92672">=&lt;/span> alpha.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> betaSize &lt;span style="color:#f92672">=&lt;/span> beta.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> carry &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (alphaSize &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> betaSize &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> aResult &lt;span style="color:#f92672">=&lt;/span> alphaSize &lt;span style="color:#f92672">&amp;gt;=&lt;/span> 0 &lt;span style="color:#f92672">?&lt;/span> alpha&lt;span style="color:#f92672">[&lt;/span>alphaSize&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> : 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> bResult &lt;span style="color:#f92672">=&lt;/span> betaSize &lt;span style="color:#f92672">&amp;gt;=&lt;/span> 0 &lt;span style="color:#f92672">?&lt;/span> beta&lt;span style="color:#f92672">[&lt;/span>betaSize&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> : 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> twoSum &lt;span style="color:#f92672">=&lt;/span> aResult &lt;span style="color:#f92672">+&lt;/span> bResult &lt;span style="color:#f92672">+&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> val &lt;span style="color:#f92672">=&lt;/span> twoSum &lt;span style="color:#f92672">%&lt;/span> 10;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> carry &lt;span style="color:#f92672">=&lt;/span> val &lt;span style="color:#f92672">/&lt;/span> 10;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.&lt;span style="color:#a6e22e">append&lt;/span>(val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alphaSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>betaSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (carry &lt;span style="color:#f92672">!=&lt;/span> 0) result.&lt;span style="color:#a6e22e">append&lt;/span>(carry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result.&lt;span style="color:#a6e22e">reverse&lt;/span>().&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>극강의 효율을 원한다면 Native array 를 써도 괜찮을 것 같다. 다만 배열 사이즈 늘리는게 귀찮다.&lt;/p>
&lt;hr>
&lt;p>공간 복잡도의 경우 $$O(max(n, m))$$ 이긴 하다. 자리가 바뀌는 경우가 생기니 1을 더하는 것도 맞다. Big-O 표기법에 안맞을 뿐.&lt;/p></content></item><item><title>Leetcode - Two Sum</title><link>https://blog.hwajin.me/ko/posts/2022/04/01/leetcode-two-sum/</link><pubDate>Fri, 01 Apr 2022 19:43:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/01/leetcode-two-sum/</guid><description>&lt;p>Given an array of integers &lt;code>nums&lt;/code> and an integer &lt;code>target&lt;/code>, return &lt;em>indices of the two numbers such that they add up to &lt;code>target&lt;/code>&lt;/em>. You may assume that each input would have *&lt;strong>exactly* one solution&lt;/strong>, and you may not use the &lt;em>same&lt;/em> element twice.&lt;/p>
&lt;p>You can return the answer in any order.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p></description><content>&lt;p>Given an array of integers &lt;code>nums&lt;/code> and an integer &lt;code>target&lt;/code>, return &lt;em>indices of the two numbers such that they add up to &lt;code>target&lt;/code>&lt;/em>. You may assume that each input would have *&lt;strong>exactly* one solution&lt;/strong>, and you may not use the &lt;em>same&lt;/em> element twice.&lt;/p>
&lt;p>You can return the answer in any order.&lt;/p>
&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [3,2,4], target = 6
Output: [1,2]
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: nums = [3,3], target = 6
Output: [0,1]
&lt;/code>&lt;/pre>&lt;h2 id="solution">Solution,&lt;/h2>
&lt;ol>
&lt;li>먼저 모두 순회시켜서 Map 에 넣는다&lt;/li>
&lt;li>다시 순회하면서 계산해본다&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">twoSum&lt;/span>(nums: IntArray, target: Int): IntArray {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> temp = mutableMapOf&amp;lt;Int, Int&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ((i, v) &lt;span style="color:#66d9ef">in&lt;/span> nums.withIndex()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.put(v, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ((i, v) &lt;span style="color:#66d9ef">in&lt;/span> nums.withIndex()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (temp.contains(target - v) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> temp.&lt;span style="color:#66d9ef">get&lt;/span>(target - v)&lt;span style="color:#f92672">!!&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> intArrayOf(temp.&lt;span style="color:#66d9ef">get&lt;/span>(target - v)&lt;span style="color:#f92672">!!&lt;/span>, i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> intArrayOf()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Valid Sudoku</title><link>https://blog.hwajin.me/ko/posts/2022/04/01/leetcode-valid-sudoku/</link><pubDate>Fri, 01 Apr 2022 15:58:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/04/01/leetcode-valid-sudoku/</guid><description>&lt;p>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:&lt;/p>
&lt;p>Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:&lt;/p>
&lt;p>A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.&lt;/p></description><content>&lt;p>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:&lt;/p>
&lt;p>Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:&lt;/p>
&lt;p>A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.&lt;/p>
&lt;p>&lt;img alt="Leetcode" src="https://user-images.githubusercontent.com/8151366/161214870-77d62353-e26a-4dab-b2f2-2eb8cebe97f4.png">&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>다른 방법도 몇 있는 것 같던데 나는 비트 연산으로 풀었다. 추가 공간을 크게 먹지 않는다.&lt;/p>
&lt;p>행, 열, 박스를 체크해야 한다. 시프트 연산으로 각 비트에 플래그를 걸고 현재 행/열/박스 와 AND 연산시 비트가 존재하는가 존재하지 않는가로 검사한다. 왜냐면, 이미 해당 비트(숫자)가 있다면 &lt;code>true&lt;/code> 일 테니.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isValidSudoku&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> board) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> row &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>9&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> col &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>9&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> box &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>9&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 9; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> 0; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> 9; &lt;span style="color:#f92672">++&lt;/span>j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (board&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> boxpos &lt;span style="color:#f92672">=&lt;/span> ((i &lt;span style="color:#f92672">/&lt;/span> 3) &lt;span style="color:#f92672">*&lt;/span> 3) &lt;span style="color:#f92672">+&lt;/span> (j &lt;span style="color:#f92672">/&lt;/span> 3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> t &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> ((&lt;span style="color:#66d9ef">int&lt;/span>) board&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((row&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> t) &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0 &lt;span style="color:#f92672">||&lt;/span> (col&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> t) &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0 &lt;span style="color:#f92672">||&lt;/span> (box&lt;span style="color:#f92672">[&lt;/span>boxpos&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> t) &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> row&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">|=&lt;/span> t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> col&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">|=&lt;/span> t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box&lt;span style="color:#f92672">[&lt;/span>boxpos&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">|=&lt;/span> t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts</title><link>https://blog.hwajin.me/ko/posts/2022/03/31/leetcode-maximum-area-of-a-piece-of-cake/</link><pubDate>Thu, 31 Mar 2022 20:41:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/03/31/leetcode-maximum-area-of-a-piece-of-cake/</guid><description>&lt;p>You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:&lt;/p>
&lt;p>horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and
verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.
Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 109 + 7.&lt;/p></description><content>&lt;p>You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:&lt;/p>
&lt;p>horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and
verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.
Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 109 + 7.&lt;/p>
&lt;p>&lt;img alt="Leetcode" src="https://user-images.githubusercontent.com/8151366/161118991-15352994-9a21-4a1b-afad-70b85dbb3680.png">&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>오늘 본 코딩 테스트에서 나온 문제인데, 이야 이걸 못풀었다는게 참 멍청했다. 우선, &lt;code>hc&lt;/code> 와 &lt;code>vc&lt;/code> 가 정렬되어 있다는 가정 하에 (안되어 있을 수 있으니 정렬 때리고) 시작한다.&lt;/p>
&lt;p>사람은 태어나 서울로 보내라 하던가. 얘도 결국 핵심은 하나다. 모든 경우의 수를 다 탐색할 이유가 없다.&lt;/p>
&lt;ol>
&lt;li>내가 이 케잌의 끝을 안다&lt;/li>
&lt;li>잘리는 범위를 안다&lt;/li>
&lt;/ol>
&lt;p>즉, 최대로 자를 수 있는 범위를 우선 구한다. 그리고 내가 자른 것보다 남은게 더 크면 그게 최대 값일 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.*;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.math.*;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">maxArea&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> h, &lt;span style="color:#66d9ef">int&lt;/span> w, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> hc, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> vc) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arrays.&lt;span style="color:#a6e22e">sort&lt;/span>(hc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arrays.&lt;span style="color:#a6e22e">sort&lt;/span>(vc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> curHeight &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> maxHeight &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> hc.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxHeight &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(hc&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">-&lt;/span> curHeight, maxHeight);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curHeight &lt;span style="color:#f92672">=&lt;/span> hc&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> curWidth &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> maxWidth &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> vc.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxWidth &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(vc&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">-&lt;/span> curWidth, maxWidth);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curWidth &lt;span style="color:#f92672">=&lt;/span> vc&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxWidth &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(maxWidth, w &lt;span style="color:#f92672">-&lt;/span> vc&lt;span style="color:#f92672">[&lt;/span>vc.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxHeight &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(maxHeight, h &lt;span style="color:#f92672">-&lt;/span> hc&lt;span style="color:#f92672">[&lt;/span>hc.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> maxHeight &lt;span style="color:#f92672">*&lt;/span> maxWidth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) ((maxHeight &lt;span style="color:#f92672">*&lt;/span> maxWidth) &lt;span style="color:#f92672">%&lt;/span> 1000000007);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>시간 복잡도는 &lt;code>O(n + log n + m + log m)&lt;/code> 정도 같다.&lt;/p>
&lt;p>집에서 10분에 푼걸 못푸네.. 삶이란 참 기구한 법이다..&lt;/p></content></item><item><title>Leetcode - Custom Sort String</title><link>https://blog.hwajin.me/ko/posts/2022/03/28/leetcode-custom-sort-string/</link><pubDate>Mon, 28 Mar 2022 21:44:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/03/28/leetcode-custom-sort-string/</guid><description>&lt;p>Permute the characters of &lt;code>s&lt;/code> so that they match the order that &lt;code>order&lt;/code> was sorted. More specifically, if a character &lt;code>x&lt;/code> occurs before a character &lt;code>y&lt;/code> in &lt;code>order&lt;/code>, then &lt;code>x&lt;/code> should occur before &lt;code>y&lt;/code> in the permuted string.&lt;/p>
&lt;p>Return &lt;em>any permutation of&lt;/em> &lt;code>s&lt;/code> &lt;em>that satisfies this property&lt;/em>.&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>교집합만 뽑아내서 하면 된다. 이것도 하도 옛날에 풀어서 다시 풀면 더 이쁘게 할 수 있을 것 같다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">customSortString&lt;/span>(String order, String str) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer, Character&lt;span style="color:#f92672">&amp;gt;&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character, Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> o &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> order.&lt;span style="color:#a6e22e">length&lt;/span>(); &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o.&lt;span style="color:#a6e22e">put&lt;/span>(order.&lt;span style="color:#a6e22e">charAt&lt;/span>(i), i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a.&lt;span style="color:#a6e22e">put&lt;/span>(i, order.&lt;span style="color:#a6e22e">charAt&lt;/span>(i));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> str.&lt;span style="color:#a6e22e">length&lt;/span>(); &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> item &lt;span style="color:#f92672">=&lt;/span> str.&lt;span style="color:#a6e22e">charAt&lt;/span>(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (o.&lt;span style="color:#a6e22e">containsKey&lt;/span>(item)) j.&lt;span style="color:#a6e22e">add&lt;/span>(o.&lt;span style="color:#a6e22e">get&lt;/span>(item));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> result.&lt;span style="color:#a6e22e">append&lt;/span>(item);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collections.&lt;span style="color:#a6e22e">sort&lt;/span>(j);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(Integer item : j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.&lt;span style="color:#a6e22e">append&lt;/span>(a.&lt;span style="color:#a6e22e">get&lt;/span>(item));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result.&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content>&lt;p>Permute the characters of &lt;code>s&lt;/code> so that they match the order that &lt;code>order&lt;/code> was sorted. More specifically, if a character &lt;code>x&lt;/code> occurs before a character &lt;code>y&lt;/code> in &lt;code>order&lt;/code>, then &lt;code>x&lt;/code> should occur before &lt;code>y&lt;/code> in the permuted string.&lt;/p>
&lt;p>Return &lt;em>any permutation of&lt;/em> &lt;code>s&lt;/code> &lt;em>that satisfies this property&lt;/em>.&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>교집합만 뽑아내서 하면 된다. 이것도 하도 옛날에 풀어서 다시 풀면 더 이쁘게 할 수 있을 것 같다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">customSortString&lt;/span>(String order, String str) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer, Character&lt;span style="color:#f92672">&amp;gt;&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character, Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> o &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> order.&lt;span style="color:#a6e22e">length&lt;/span>(); &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o.&lt;span style="color:#a6e22e">put&lt;/span>(order.&lt;span style="color:#a6e22e">charAt&lt;/span>(i), i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a.&lt;span style="color:#a6e22e">put&lt;/span>(i, order.&lt;span style="color:#a6e22e">charAt&lt;/span>(i));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> str.&lt;span style="color:#a6e22e">length&lt;/span>(); &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> item &lt;span style="color:#f92672">=&lt;/span> str.&lt;span style="color:#a6e22e">charAt&lt;/span>(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (o.&lt;span style="color:#a6e22e">containsKey&lt;/span>(item)) j.&lt;span style="color:#a6e22e">add&lt;/span>(o.&lt;span style="color:#a6e22e">get&lt;/span>(item));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> result.&lt;span style="color:#a6e22e">append&lt;/span>(item);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collections.&lt;span style="color:#a6e22e">sort&lt;/span>(j);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(Integer item : j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.&lt;span style="color:#a6e22e">append&lt;/span>(a.&lt;span style="color:#a6e22e">get&lt;/span>(item));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result.&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Leetcode - Longest Substring Without Repeating Charactes</title><link>https://blog.hwajin.me/ko/posts/2022/03/28/leetcode-longest-substring-without-repeating/</link><pubDate>Mon, 28 Mar 2022 20:12:00 +0900</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/03/28/leetcode-longest-substring-without-repeating/</guid><description>&lt;p>문자열 &lt;code>s&lt;/code> 가 주어졌을 때 겹치는 문자가 없는 부분 문자열의 길이를 반환하라.&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>보자마자 알 수 있었다. Sliding Window 로 풀 수 있다는 것을. Two Pointer 알고리즘은 워낙 쉽고 좋아해서(쉬워서 좋아함..) 그냥 풀 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">lengthOfLongestSubstring&lt;/span>(String sa) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> start &lt;span style="color:#f92672">=&lt;/span> 0, pointer &lt;span style="color:#f92672">=&lt;/span> 0, max &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character&lt;span style="color:#f92672">&amp;gt;&lt;/span> use &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashSet&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> l &lt;span style="color:#f92672">=&lt;/span> sa.&lt;span style="color:#a6e22e">length&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> sa.&lt;span style="color:#a6e22e">toCharArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (l &lt;span style="color:#f92672">==&lt;/span> pointer) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (use.&lt;span style="color:#a6e22e">contains&lt;/span>(arr&lt;span style="color:#f92672">[&lt;/span>pointer&lt;span style="color:#f92672">]&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>start;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pointer &lt;span style="color:#f92672">=&lt;/span> start;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use.&lt;span style="color:#a6e22e">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use.&lt;span style="color:#a6e22e">add&lt;/span>(arr&lt;span style="color:#f92672">[&lt;/span>pointer&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(max, use.&lt;span style="color:#a6e22e">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>pointer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>하지만 메모리 사용률이 엄청 높게 나왔다. 크게 생각하고 푼게 아니라, &lt;code>use&lt;/code> 를 굳이 안쓰고 풀 수 있을텐데, 우선 이대로 제출했다.&lt;/p></description><content>&lt;p>문자열 &lt;code>s&lt;/code> 가 주어졌을 때 겹치는 문자가 없는 부분 문자열의 길이를 반환하라.&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>보자마자 알 수 있었다. Sliding Window 로 풀 수 있다는 것을. Two Pointer 알고리즘은 워낙 쉽고 좋아해서(쉬워서 좋아함..) 그냥 풀 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">lengthOfLongestSubstring&lt;/span>(String sa) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> start &lt;span style="color:#f92672">=&lt;/span> 0, pointer &lt;span style="color:#f92672">=&lt;/span> 0, max &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character&lt;span style="color:#f92672">&amp;gt;&lt;/span> use &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashSet&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> l &lt;span style="color:#f92672">=&lt;/span> sa.&lt;span style="color:#a6e22e">length&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> sa.&lt;span style="color:#a6e22e">toCharArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (l &lt;span style="color:#f92672">==&lt;/span> pointer) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (use.&lt;span style="color:#a6e22e">contains&lt;/span>(arr&lt;span style="color:#f92672">[&lt;/span>pointer&lt;span style="color:#f92672">]&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>start;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pointer &lt;span style="color:#f92672">=&lt;/span> start;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use.&lt;span style="color:#a6e22e">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use.&lt;span style="color:#a6e22e">add&lt;/span>(arr&lt;span style="color:#f92672">[&lt;/span>pointer&lt;span style="color:#f92672">]&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(max, use.&lt;span style="color:#a6e22e">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>pointer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>하지만 메모리 사용률이 엄청 높게 나왔다. 크게 생각하고 푼게 아니라, &lt;code>use&lt;/code> 를 굳이 안쓰고 풀 수 있을텐데, 우선 이대로 제출했다.&lt;/p></content></item><item><title>Leetcode - Container With Most Water</title><link>https://blog.hwajin.me/ko/posts/2022/03/28/leetcode-container-with-most-water/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.hwajin.me/ko/posts/2022/03/28/leetcode-container-with-most-water/</guid><description>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>You are given an integer array &lt;code>height&lt;/code> of length &lt;code>n&lt;/code>. There are &lt;code>n&lt;/code> vertical lines drawn such that the two endpoints of the &lt;code>ith&lt;/code> line are &lt;code>(i, 0)&lt;/code> and &lt;code>(i, height[i])&lt;/code>.&lt;/p>
&lt;p>Find two lines that together with the x-axis form a container, such that the container contains the most water.&lt;/p>
&lt;p>Return &lt;em>the maximum amount of water a container can store&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Notice&lt;/strong> that you may not slant the container.&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>Two Pointer 로 쉽게 풀 수 있다. 집합의 첫 번째 원소와 마지막 원소를 기준으로 잡고, 더 작은 쪽이 언제나 기준이 된다.&lt;/p></description><content>&lt;h2 id="problem">Problem,&lt;/h2>
&lt;p>You are given an integer array &lt;code>height&lt;/code> of length &lt;code>n&lt;/code>. There are &lt;code>n&lt;/code> vertical lines drawn such that the two endpoints of the &lt;code>ith&lt;/code> line are &lt;code>(i, 0)&lt;/code> and &lt;code>(i, height[i])&lt;/code>.&lt;/p>
&lt;p>Find two lines that together with the x-axis form a container, such that the container contains the most water.&lt;/p>
&lt;p>Return &lt;em>the maximum amount of water a container can store&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Notice&lt;/strong> that you may not slant the container.&lt;/p>
&lt;h2 id="solution">Solution,&lt;/h2>
&lt;p>Two Pointer 로 쉽게 풀 수 있다. 집합의 첫 번째 원소와 마지막 원소를 기준으로 잡고, 더 작은 쪽이 언제나 기준이 된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">maxArea&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> height) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> left &lt;span style="color:#f92672">=&lt;/span> 0, right &lt;span style="color:#f92672">=&lt;/span> height.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1, max &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> val &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">min&lt;/span>(height&lt;span style="color:#f92672">[&lt;/span>left&lt;span style="color:#f92672">]&lt;/span>, height&lt;span style="color:#f92672">[&lt;/span>right&lt;span style="color:#f92672">]&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (right &lt;span style="color:#f92672">-&lt;/span> left);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (val &lt;span style="color:#f92672">&amp;gt;&lt;/span> max) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max &lt;span style="color:#f92672">=&lt;/span> val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (height&lt;span style="color:#f92672">[&lt;/span>left&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> height&lt;span style="color:#f92672">[&lt;/span>right&lt;span style="color:#f92672">]&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>right;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>라라벨의 의존성 주입 컨테이너</title><link>https://blog.hwajin.me/ko/posts/2018/07/04/laravel-dependency-injection-container/</link><pubDate>Wed, 04 Jul 2018 15:00:00 +0000</pubDate><guid>https://blog.hwajin.me/ko/posts/2018/07/04/laravel-dependency-injection-container/</guid><description>&lt;p>&lt;a href="https://laravel.kr/">Laravel&lt;/a> 의 제어의 역전(Inversion of Control) / 의존성 주입 (Dependency Injection) 컨테이너는 매우 강력한 기능입니다. 안타깝게도, 라라벨의 &lt;a href="https://laravel.kr/docs/5.6/">공식 문서&lt;/a>는 이 기능의 모든 면을 설명하고 있지 않습니다. 그런 이유로 저는 직접 이 기능들을 실험하여 본 문서를 작성했습니다. 이 문서는 &lt;a href="https://github.com/laravel/framework/tree/5.4/src/Illuminate/Container">Laravel 5.4.26&lt;/a> 버전을 기준으로 작성되었으며, 그 외 버전은 기능이 다를 수 있습니다. &lt;strong>이 문서는 번역되었습니다.&lt;/strong> &lt;em>번역한 문서는 &lt;a href="https://gist.github.com/davejamesmiller/bd857d9b0ac895df7604dd2e63b23afe">이곳&lt;/a>을 클릭하시면 이동하실 수 있습니다.&lt;/em>&lt;/p>
&lt;h2 id="의존성-주입이란">의존성 주입이란&lt;/h2>
&lt;p>이 문서에서는 의존성 주입과 제어의 역전 원칙에 대해 설명하지 않습니다. 이것들에 대해 익숙하지 않으시다면 &lt;a href="http://fabien.potencier.org/what-is-dependency-injection.html">What is Dependency Injection?&lt;/a> by Fabien Potencier (&lt;a href="http://symfony.com/">Symfony&lt;/a> framework 의 메인테이너) 가 작성한 글을 참고하실 수 있습니다.&lt;/p></description><content>&lt;p>&lt;a href="https://laravel.kr/">Laravel&lt;/a> 의 제어의 역전(Inversion of Control) / 의존성 주입 (Dependency Injection) 컨테이너는 매우 강력한 기능입니다. 안타깝게도, 라라벨의 &lt;a href="https://laravel.kr/docs/5.6/">공식 문서&lt;/a>는 이 기능의 모든 면을 설명하고 있지 않습니다. 그런 이유로 저는 직접 이 기능들을 실험하여 본 문서를 작성했습니다. 이 문서는 &lt;a href="https://github.com/laravel/framework/tree/5.4/src/Illuminate/Container">Laravel 5.4.26&lt;/a> 버전을 기준으로 작성되었으며, 그 외 버전은 기능이 다를 수 있습니다. &lt;strong>이 문서는 번역되었습니다.&lt;/strong> &lt;em>번역한 문서는 &lt;a href="https://gist.github.com/davejamesmiller/bd857d9b0ac895df7604dd2e63b23afe">이곳&lt;/a>을 클릭하시면 이동하실 수 있습니다.&lt;/em>&lt;/p>
&lt;h2 id="의존성-주입이란">의존성 주입이란&lt;/h2>
&lt;p>이 문서에서는 의존성 주입과 제어의 역전 원칙에 대해 설명하지 않습니다. 이것들에 대해 익숙하지 않으시다면 &lt;a href="http://fabien.potencier.org/what-is-dependency-injection.html">What is Dependency Injection?&lt;/a> by Fabien Potencier (&lt;a href="http://symfony.com/">Symfony&lt;/a> framework 의 메인테이너) 가 작성한 글을 참고하실 수 있습니다.&lt;/p>
&lt;h2 id="컨테이너-접근">컨테이너 접근&lt;/h2>
&lt;p>라라벨의 컨테이너 인스턴스에 접근하는 방법은 여러가지가 있습니다. 그러나 가장 간단한 방법은 &lt;code>app()&lt;/code> 헬퍼 메소드를 호출하는 것입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 시간에는 다른 방법에 대해서는 따로 서술하지 않겠습니다. 그 대신, 컨테이너 클래스에 초점을 맞추어 보도록 하겠습니다.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> 공식 문서에서는 &lt;code>$container&lt;/code> 대신 &lt;code>$this-&amp;gt;app&lt;/code> 을 사용할 것입니다.&lt;/p>
&lt;p>(* 라라벨 어플리케이션에서 이것은 실제로 Application 이라는 Container 의 서브 클래스 입니다. 그러나 이 글에서는 Container 메소드에 대해서만 설명할 것입니다.)&lt;/p>
&lt;h3 id="외부에서-illuminatecontainer-를-사용">외부에서 Illuminate\Container 를 사용&lt;/h3>
&lt;p>라라벨 외부에서 컨테이너를 사용하고 싶으신 경우, &lt;a href="https://packagist.org/packages/illuminate/container">이것&lt;/a>을 설치하신 후, 아래와 같이 사용하실 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Illuminate\Container\Container&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="기본적인-사용법">기본적인 사용법&lt;/h3>
&lt;p>가장 간단한 방법은 의존성 주입을 원하는 클래스의 생성자에 타입 힌트를 사용하는 것입니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> * @var AnotherClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">AnotherClass&lt;/span> $dependency)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">dependency&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후 &lt;code>new MyClass&lt;/code> 를 사용하는 대신, 컨테이너의 &lt;code>make()&lt;/code> 메소드를 사용합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$instance &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">MyClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>컨테이너는 자동으로 의존성을 인스턴스화 할 것이며 이것은 실질적으로 아래와 동일합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$instance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">AnotherClass&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>AnotherClass&lt;/code> 가 다른 의존성을 가진 경우 컨테이너는 재귀적으로 의존성을 해결할 것입니다.&lt;/p>
&lt;h3 id="실용적인-예제">실용적인 예제&lt;/h3>
&lt;p>여기 조금 더 실용적인 예제가 있습니다. (based on &lt;a href="http://php-di.org/doc/getting-started.html">PHP-DI docs&lt;/a>)가 있습니다. - 회원 가입 기능에서 메일 기능을 분리하는 예제&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Mailer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">mail&lt;/span>($recipient, $content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Send an email to the recipient
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserManager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $mailer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Mailer&lt;/span> $mailer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mailer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $mailer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">register&lt;/span>($email, $password)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create the user account
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Send the user an email to say hello!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mailer&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mail&lt;/span>($email, &lt;span style="color:#e6db74">&amp;#39;Hello and welcome!&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Illuminate\Container\Container&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$userManager &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">UserManager&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$userManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">register&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;dave@davejamesmiller.com&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;MySuperSecurePassword!&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="구현-객체에-인터페이스를-바인딩-하는-법">구현 객체에 인터페이스를 바인딩 하는 법&lt;/h2>
&lt;p>컨테이너를 이용하면 인터페이스와 구현체 (Impl)를 런타임시 쉽게 인스턴스화 할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">MyInterface&lt;/span> { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">AnotherInterface&lt;/span> { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후, 이 인터페이스들을 구현하는 클래스를 작성합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">MyInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">AnotherInterface&lt;/span> $dependency)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">dependency&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그리고 &lt;code>bind()&lt;/code> 메소드를 사용하여 각 인터페이스를 구현체 (class)에 매핑합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">MyInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">MyClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">AnotherInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">AnotherClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막으로, &lt;code>make()&lt;/code> 메소드에 클래스 이름이 아닌 인터페이스 이름을 전달합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$instance &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">MyInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> 만약 인터페이스 바인딩을 잊으셨다면 치명적인 오류가 발생합니다.&lt;/p>
&lt;pre tabindex="0">&lt;code>Fatal error: Uncaught ReflectionException: Class MyInterface does not exist
&lt;/code>&lt;/pre>&lt;p>왜냐하면 컨테이너는 &lt;code>new MyInterface&lt;/code>, 즉 인터페이스를 인스턴스화 하고자 할 것이기 때문입니다. 이것은 올바른 클래스가 아니죠.&lt;/p>
&lt;h3 id="실용적인-예제-1">실용적인 예제&lt;/h3>
&lt;p>변경 가능한 캐시 레이어를 구성해보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>($key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>($key, $value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RedisCache&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>($key) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>($key, $value) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Worker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $cache;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $cache;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Use the cache for something...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> $result &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">cache&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;worker&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($result &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">do_something_slow&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">cache&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;worker&amp;#39;&lt;/span>, $result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Illuminate\Container\Container&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">RedisCache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$result &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Worker&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="추상--구상-클래스-바인딩">추상 &amp;amp; 구상 클래스 바인딩&lt;/h2>
&lt;p>추상 클래스(abstract class) 또한 바인딩 할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">MyAbstract&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">MyConcreteClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 추상 클래스를 서브 클래스로 대체할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">CustomMySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="커스텀-바인딩">커스텀 바인딩&lt;/h2>
&lt;p>만약 클래스가 추가적인 설정을 요구한다면 클래스의 이름 대신 &lt;code>closure&lt;/code> 를 &lt;code>bind()&lt;/code> 메소드의 두 번째 매개 변수로 넘길 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>(&lt;span style="color:#a6e22e">MYSQL_HOST&lt;/span>, &lt;span style="color:#a6e22e">MYSQL_PORT&lt;/span>, &lt;span style="color:#a6e22e">MYSQL_USER&lt;/span>, &lt;span style="color:#a6e22e">MYSQL_PASS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>매 번 데이터베이스 인터페이스가 필요할 때 마다 새로운 MySQLDatabase 인스턴스가 생성되어 사용되며, 몇 가지 미리 지정된 구성값을 필요로 합니다. (단일 인스턴스를 공유하고자 한다면, 아래 &lt;em>싱글톤&lt;/em> 를 읽어주시기 바랍니다.)&lt;/p>
&lt;p>클로저는 컨테이너 인스턴스를 첫 번째 매개 변수로 받으며, 필요한 경우 다른 클래스를 인스턴스화 하는 데 사용하실 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $filesystem &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">FileLogger&lt;/span>($filesystem, &lt;span style="color:#e6db74">&amp;#39;logs/error.log&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클로저는 구상 클래스가 인스턴스화 하는 법을 따로 지정할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">GitHub\Client&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">GitHub\Client&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $client&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setEnterpriseUrl&lt;/span>(&lt;span style="color:#a6e22e">GITHUB_HOST&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $client;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="콜백-해결-컨테이너-이벤트httpslaravelkrdocs56containercontainer-events">콜백 해결 &lt;a href="https://laravel.kr/docs/5.6/container#container-events">(컨테이너 이벤트)&lt;/a>&lt;/h3>
&lt;p>바인딩을 완벽하게 오버라이딩 하는 대신, &lt;code>resolving()&lt;/code> 메소드를 이용하여 객체의 의존성을 해결할 때 콜백을 받으실 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#a6e22e">GitHub\Client&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($client, &lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $client&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setEnterpriseUrl&lt;/span>(&lt;span style="color:#a6e22e">GITHUB_HOST&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>콜백이 여러 개 존재한다면, 모든 콜백이 호출됩니다. 이 기능은 인터페이스나 추상 클래스에도 동일하게 동작합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Logger&lt;/span> $logger) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setLevel&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;debug&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#a6e22e">FileLogger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">FileLogger&lt;/span> $logger) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setFilename&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;logs/debug.log&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FileLogger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$logger &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또한 모든 의존성 해결에 있어서 콜백을 받을 수도 있습니다 (제 생각에는 Logging / Debugging 에만 유용할 것 같습니다)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> ($object, &lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="클래스-확장-바인딩-확장httpslaravelkrdocs56containerextending-bindings">클래스 확장 &lt;a href="https://laravel.kr/docs/5.6/container#extending-bindings">(바인딩 확장)&lt;/a>&lt;/h3>
&lt;p>&lt;code>extend()&lt;/code> 메소드를 사용하여 클래스를 감싸고 다른 객체로 반환시킬 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">extend&lt;/span>(&lt;span style="color:#a6e22e">APIClient&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($client, &lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">APIClientDecorator&lt;/span>($client);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>반환되는 객체는 여전히 같은 인터페이스를 구현해야 합니다. 그렇지 않으면 Type hinting 에서 에러가 발생할 것입니다.&lt;/p>
&lt;h2 id="싱글톤">싱글톤&lt;/h2>
&lt;p>자동 바인딩과 &lt;code>bind()&lt;/code> 메소드를 이용하면 필요할 때마다 새로운 인스턴스가 생성됩니다 (또는 클로저가 호출됩니다). 하나의 인스턴스를 공유하고자 한다면 &lt;code>bind()&lt;/code> 대신 &lt;code>singleton()&lt;/code> 을 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">RedisCache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 클로저를 사용할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;testdb&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;pass&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>구상 클래스를 싱글톤으로 생성하고자 한다면, 두 번째 매개 변수를 제외하고 전달합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 경우, 싱글톤 객체는 필요할 때 단 한 번 생성될 것입니다. 그리고 이후에는 이것을 재사용 할 것입니다. 재사용을 원하는 인스턴스가 이미 존재하는 경우, &lt;code>instance()&lt;/code> 메소드를 사용하시기 바랍니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $container);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="임의의-바인딩-이름">임의의 바인딩 이름&lt;/h2>
&lt;p>클래스나 인터페이스 이름 대신 임의의 문자열을 사용할 수 있습니다. 타입 힌트는 사용할 수 없으며, &lt;code>make()&lt;/code> 메소드를 이용해야 합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>인터페이스와 클래스 모두 짧은 이름 기능을 지원하려면 &lt;code>alias()&lt;/code> 메소드를 사용해야 합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">RedisCache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alias&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;cache&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$cache1 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$cache2 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;cache&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">assert&lt;/span>($cache1 &lt;span style="color:#f92672">===&lt;/span> $cache2);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="임의의-값-저장">임의의 값 저장&lt;/h2>
&lt;p>또한 컨테이너를 임의의 값을 저장하기 위해 사용할 수도 있습니다 (e.g. 설정 데이터)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;testdb&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db_name &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 방법은 배열 접근을 지원하고 있습니다. 조금 더 자연스러운 방식이죠&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container[&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;testdb&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db_name &lt;span style="color:#f92672">=&lt;/span> $container[&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클로저 바인딩과 같이 사용하면 왜 이것이 유용할 수 있는지 알 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.host&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.pass&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>라라벨 자체는 컨테이너를 설정(구성)을 위해 사용하지 않습니다. 설정 파일은 &lt;a href="https://laravel.kr/docs/5.6/configuration">Config&lt;/a> 로 분리되어 있고 설정에 대한 부분은 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Config/Repository.php">&lt;code>Illuminate\Config\Repository&lt;/code>&lt;/a> 클래스에 존재합니다. 그러나 &lt;a href="http://php-di.org/doc/php-definitions.html#values">PHP-DI&lt;/a> 는 아닙니다.&lt;/p>
&lt;p>&lt;strong>Tip:&lt;/strong> 배열 구문은 &lt;code>make()&lt;/code> 메소드 대신 객체를 인스턴스화 할 때 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$db &lt;span style="color:#f92672">=&lt;/span> $container[&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="함수와-메소드의-의존성-주입">함수와 메소드의 의존성 주입&lt;/h2>
&lt;p>우리는 지금까지 생성자를 통한 의존성 주입을 보았습니다. 그러나 라라벨은 함수에도 의존성 주입 기능을 제공합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">do_something&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$result &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;do_something&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>추가적인 매개 변수는 순서 또는 연관 배열로 전달할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">show_product&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache, $id, $tab &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;details&amp;#39;&lt;/span>) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// show_product($cache, 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// show_product($cache, 1, &amp;#39;spec&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;spec&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;tab&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;spec&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능은 Callable 메소드에 모두 적용할 수 있습니다.&lt;/p>
&lt;h4 id="closures">Closures&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$closure &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>($closure);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="static-methods">Static methods&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">staticMethod&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;SomeClass&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;staticMethod&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// or:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;SomeClass::staticMethod&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="instance-methods">Instance methods&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PostController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">show&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache, $id) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$controller &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">PostController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([$controller, &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([$controller, &lt;span style="color:#e6db74">&amp;#39;show&amp;#39;&lt;/span>], [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="인스턴스-메소드-호출을-위한-손쉬운-방법">인스턴스 메소드 호출을 위한 손쉬운 방법&lt;/h3>
&lt;p>클래스를 인스턴스화하고 바로 메소드를 호출하는 빠른 방법이 있습니다. &lt;code>ClassName@methodName&lt;/code> 을 사용하는 것입니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@show&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>컨테이너는 클래스를 인스턴스화하는 것에 이 기능을 사용합니다. 이것은 다음을 의미합니다&lt;/p>
&lt;ul>
&lt;li>의존성은 생성자를 통해 주입됩니다&lt;/li>
&lt;li>클래스를 재사용하고자 할 때 싱글톤으로 정의할 수 있습니다&lt;/li>
&lt;li>구상 클래스 대신 인터페이스 또는 임의의 이름을 사용할 수 있습니다&lt;/li>
&lt;/ul>
&lt;p>예를 들어, 아래와 같은 경우가 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PostController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Request&lt;/span> $request) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;post&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">PostController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;post@index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막으로, 세 번째 매개 변수로 &amp;ldquo;기본 메소드&amp;quot;를 전달할 수 있습니다. 만약 첫번째 매개 변수가 메소드가 따로 지정되어 있지 않은 클래스 이름인 경우, 기본 메소드가 대신 호출됩니다. 라라벨은 이 기능을 이용하여 &lt;a href="https://laravel.kr/docs/5.6/events#registering-events-and-listeners">이벤트 핸들러&lt;/a>를 구현합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">MyEventHandler&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $parameters, &lt;span style="color:#e6db74">&amp;#39;handle&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 위와 같음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;MyEventHandler@handle&amp;#39;&lt;/span>, $parameters);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="메소드-호출-바인딩">메소드 호출 바인딩&lt;/h3>
&lt;p>&lt;code>bindMethod()&lt;/code> 메소드는 메소드 호출을 오버라이드 할 수 있습니다. 예를 들어, 추가적인 매개 변수를 아래와 같이 전달할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bindMethod&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($controller, $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $posts &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">get_posts&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $controller&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">index&lt;/span>($posts);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능은 기존의 메소드 대신 클로저를 호출하여 동작합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController&amp;#39;&lt;/span>, [], &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PostController&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그러나 &lt;code>call()&lt;/code> 메소드에서 추가적인 매개 변수를 전달할 수는 없습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 사용할 수 없음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;Not used :-(&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>Notes:&lt;/strong> 이 메소드는 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>에 존재하지 않습니다. &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Container/Container.php">컨테이너 클래스&lt;/a>에만 존재합니다. &lt;a href="https://github.com/laravel/framework/pull/16800">왜 매개 변수를 무시하는지 이유는 이곳에서 확인하실 수 있습니다&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="문맥에-따른-조건적-바인딩">문맥에 따른 조건적 바인딩&lt;/h2>
&lt;p>가끔 여러분은 각각의 클래스마다 다른 구현 객체를 전달하고자 할 수도 있습니다. 다음은 &lt;a href="https://laravel.kr/docs/5.6/container#contextual-binding">라라벨 공식 문서&lt;/a>에서 일부 수정된 예제입니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">PhotoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#a6e22e">LocalFilesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">VideoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#a6e22e">S3Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PhotoController&lt;/code> 와 &lt;code>VideoController&lt;/code> 는 &lt;code>Filesystem&lt;/code> 인터페이스에 의존적일 수 있지만, 서로 다른 구현체를 받게 됩니다. &lt;code>bind()&lt;/code> 와 같이 &lt;code>give()&lt;/code> 에서도 클로저를 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">VideoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Storage&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">disk&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;s3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 이름(문자열)을 통해 의존성을 주입할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;s3&amp;#39;&lt;/span>, $s3Filesystem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">VideoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;s3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="기본-타입-바인딩">기본 타입 바인딩&lt;/h3>
&lt;p>여러분은 또한 기본 타입들(string, integer..) 를 &lt;code>needs()&lt;/code> 메소드를 통해 주입할 수 있습니다 (인터페이스 대신). 그리고 &lt;code>give()&lt;/code> 메소드를 통해 값들을 전달할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;$username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#a6e22e">DB_USER&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클로저를 통해 값이 필요할 때 까지 값을 가지고 오는 것을 늦출 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;$username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>여기서 여러분은 클래스나 또는 의존성 이름을 사용할 수 없습니다 (e.g. &lt;code>give('database.user')&lt;/code>). 왜냐하면, 이 값은 리터럴 값으로 반환되기 때문입니다. 대신 클로저를 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;$username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="태깅-tagginghttpslaravelkrdocs56containertagging">태깅 &lt;a href="https://laravel.kr/docs/5.6/container#tagging">(Tagging)&lt;/a>&lt;/h2>
&lt;p>컨테이너를 사용하여 관련된 바인딩을 &amp;ldquo;태그&amp;quot;할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>(&lt;span style="color:#a6e22e">MyPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>(&lt;span style="color:#a6e22e">AnotherPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후 태그가 지정된 모든 인스턴스를 배열로 받아올 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tagged&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> $plugin) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $plugin&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">init&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>tag()&lt;/code> 메소드의 매개 변수는 배열도 사용할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>([&lt;span style="color:#a6e22e">MyPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">AnotherPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>(&lt;span style="color:#a6e22e">MyPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plugin.admin&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="재바인딩-rebinding">재바인딩 (Rebinding)&lt;/h2>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 이 기능은 조금 더 고급 기능이며, 대부분의 경우 이 기능을 필요로 하지 않습니다. 원하신다면 이 부분을 넘기셔도 괜찮습니다!&lt;/em>&lt;/p>
&lt;p>바인딩 또는 인스턴스가 사용된 후 변경될 때 &lt;code>rebinding()&lt;/code> 콜백이 호출됩니다. 예를 들어 세션 클래스가 Auth 클래스에 의해 사용된 후 변경된다면, Auth 클래스는 변경 사실을 알아야 합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">rebinding&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($container, $session) &lt;span style="color:#66d9ef">use&lt;/span> ($auth) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($session);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Session&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dave&amp;#39;&lt;/span>]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$auth &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>(); &lt;span style="color:#75715e">// dave
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Session&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;danny&amp;#39;&lt;/span>]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>(); &lt;span style="color:#75715e">// danny
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>재바인딩에 대해 더 자세한 내용은 &lt;a href="https://stackoverflow.com/questions/38974593/laravels-ioc-container-rebinding-abstract-types">이곳&lt;/a>과 &lt;a href="https://code.tutsplus.com/tutorials/digging-in-to-laravels-ioc-container--cms-22167">이곳&lt;/a>을 참고해 주시기 바랍니다.&lt;/p>
&lt;h3 id="refresh">refresh()&lt;/h3>
&lt;p>이 기능을 더 쉽게 사용하고자 할 때, &lt;code>refresh()&lt;/code> 메소드를 사용할 수 있습니다. 이것은 아래와 같은 일반적인 패턴을 다루고자 할 때 사용합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">refresh&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $auth, &lt;span style="color:#e6db74">&amp;#39;setSession&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또한 이 기능은 이미 존재하는 인스턴스나 바인딩을 반환하므로, 아래와 같이 코드를 작성할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">refresh&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $auth, &lt;span style="color:#e6db74">&amp;#39;setSession&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(개인적으로 저는 이 구문이 더 혼란스럽고 위의 좀 더 자세한 방법을 선호합니다)&lt;/p>
&lt;p>&lt;em>&lt;strong>Notes:&lt;/strong> 이 메소드는 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>에 존재하지 않습니다. &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Container/Container.php">컨테이너 클래스&lt;/a>에만 존재합니다.&lt;/em>&lt;/p>
&lt;h2 id="생성자-매개-변수-오버라이딩">생성자 매개 변수 오버라이딩&lt;/h2>
&lt;p>&lt;code>makeWith()&lt;/code> 메소드는 생성자 매개 변수에 추가적인 값을 전달할 수 있습니다. 기존에 존재하는 인스턴스나 싱글톤을 무시하고 종속성을 주입하면서 다른 매개 변수로 클래스의 인스턴스를 생성할 때 유용하게 사용될 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Post&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Database&lt;/span> $db, &lt;span style="color:#a6e22e">int&lt;/span> $id) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$post1 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">makeWith&lt;/span>(&lt;span style="color:#a6e22e">Post&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$post2 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">makeWith&lt;/span>(&lt;span style="color:#a6e22e">Post&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 라라벨 5.3 이하에서는 간단하게 &lt;code>make($class, $pameters)&lt;/code> 로 사용했었습니다. 라라벨 5.4에서 이 기능은 삭제되어 &lt;code>makeWith() &lt;/code> 로 추가되었습니다. 그러나, 라라벨 5.5 에서는 다시 라라벨 5.3과 같이 사용할 수 있습니다.&lt;/em>&lt;/p>
&lt;h2 id="그-외-메소드">그 외 메소드&lt;/h2>
&lt;p>그 외 유용하다고 생각하는 모든 메소드를 다루고자 합니다. 이 내용으로 충분하지 않다면 아래 퍼블릭 메소드를 참고하실 수 있습니다.&lt;/p>
&lt;h3 id="bound">bound()&lt;/h3>
&lt;p>&lt;code>bound()&lt;/code> 메소드는 &lt;code>bind()&lt;/code>, &lt;code>singleton()&lt;/code>, &lt;code>instance()&lt;/code>, &lt;code>alias()&lt;/code> 메소드에 의해 클래스 또는 이름(문자열)이 바운딩 되었을 때 &lt;code>true&lt;/code> 를 반환합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bound&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>배열 접근 구문과 &lt;code>isset()&lt;/code>를 사용할 수도 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> &lt;span style="color:#a6e22e">isset&lt;/span>($container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>])) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>unset()&lt;/code> 함수를 통해 제거될 수 있으며, 지정된 바인딩 / 인스턴스 / 별칭을 제거합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">unset&lt;/span>($container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bound&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>)); &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bindif">bindIf()&lt;/h3>
&lt;p>&lt;code>bindIf()&lt;/code> 는 바인딩이 존재하지 않는 경우에만 바인딩을 하는 메소드 입니다. 동작 자체는 &lt;code>bind()&lt;/code> 와 동일하게 동작합니다. (위의 &lt;code>bound()&lt;/code> 참고)&lt;/p>
&lt;p>이것은 잠재적으로 사용자의 오버라이드를 허용하여 패키지의 기본 바인딩을 등록하게끔 사용될 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bindIf&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FallbackLoader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그러나 &lt;code>singletonIf()&lt;/code> 메소드는 없습니다. 대신, &lt;code>bindIf($abstract, $concrete, true)&lt;/code> 를 통해 동일한 기능을 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bindIf&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FallbackLoader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 아래와 같은 방법도 가능합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bound&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FallbackLoader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="resolved">resolved()&lt;/h3>
&lt;p>&lt;code>resolved()&lt;/code> 메소드는 의존성 문제가 이전에 해결된 경우 &lt;code>true&lt;/code> 를 반환합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolved&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)); &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolved&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)); &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>저는 이 기능이 유용할 것인지 확신하지 못하겠습니다.. &lt;code>unset()&lt;/code> 을 사용하면 재설정이 이루어지는데 말이죠 (위의 &lt;code>bound()&lt;/code> 참고)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">unset&lt;/span>($container[&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolved&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)); &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="factory">factory()&lt;/h3>
&lt;p>&lt;code>factory()&lt;/code> 메소드는 매개 변수가 존재하지 않고 &lt;code>make()&lt;/code> 를 호출하는 클로저를 반환합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$dbFactory &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">factory&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db &lt;span style="color:#f92672">=&lt;/span> $dbFactory();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능이 언제 쓸모가 있을 지 모르겠네요.&lt;/p>
&lt;h3 id="wrap">wrap()&lt;/h3>
&lt;p>&lt;code>wrap()&lt;/code> 메소드는 클로저가 실행될 때 종속성이 주입되도록 클로저를 래핑합니다. wrap 메소드는 매개 변수 배열을 사용할 수 있으며 반환된 클로저에는 매개 변수가 없습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$cacheGetter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Cache&lt;/span> $cache, $key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $cache&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>($key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$usernameGetter &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">wrap&lt;/span>($cacheGetter, [&lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$username &lt;span style="color:#f92672">=&lt;/span> $usernameGetter();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능이 언제 쓸모가 있을 지 모르겠네요. (2)&lt;/p>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 이 메소드는 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>에 존재하지 않습니다. &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Container/Container.php">컨테이너 클래스&lt;/a>에만 존재합니다.&lt;/em>&lt;/p>
&lt;h3 id="afterresolving">afterResolving()&lt;/h3>
&lt;p>&lt;code>afterResolving()&lt;/code> 은 &lt;code>resolving()&lt;/code> 콜백 후에 &lt;code>afterResolving()&lt;/code> 콜백을 호출한다는 점을 제외하면 &lt;code>resolving()&lt;/code> 과 동일합니다. 이 기능이 언제 쓸모가 있을 지 모르겠네요.&lt;/p>
&lt;h3 id="마지막으로">마지막으로..&lt;/h3>
&lt;ul>
&lt;li>&lt;code>isShared()&lt;/code> : 주어진 타입이 공유된 싱글톤인지 인스턴스인지 알아냅니다.&lt;/li>
&lt;li>&lt;code>isAlias()&lt;/code> : 주어진 문자열이 등록된 별칭(alias)인지 알아냅니다.&lt;/li>
&lt;li>&lt;code>hasMethodBinding()&lt;/code> : 컨테이너가 주어진 바인딩을 가지고 있는지 알아냅니다.&lt;/li>
&lt;li>&lt;code>getBindings()&lt;/code> : 등록된 모든 바인딩을 원시 배열의 형태로 가져옵니다.&lt;/li>
&lt;li>&lt;code>getAlias($abstract)&lt;/code> : 기본 클래스와 바인딩 이름에 대한 별칭을 해결(Resolves) 합니다.&lt;/li>
&lt;li>&lt;code>forgetInstance($abstract)&lt;/code> : 단일 인스턴스 객체(싱글톤)를 지웁니다.&lt;/li>
&lt;li>&lt;code>forgetInstances()&lt;/code> 모든 인스턴스 객체를 지웁니다.&lt;/li>
&lt;li>&lt;code>flush()&lt;/code> : 모든 바인딩과 인스턴스를 지우고 컨테이너를 리셋합니다 (effectively resetting the container).&lt;/li>
&lt;li>&lt;code>setInstance()&lt;/code> : &lt;code>getInstance()&lt;/code> 에서 사용된 인스턴스를 대체합니다. (Tip: &lt;code>setInstance(null)&lt;/code> 을 이용해서 이것을 지우면 다음에 새로운 인스턴스가 생성됩니다.)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 마지막 부분의 메소드들은 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>의 일부가 아닙니다.&lt;/em>&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>이 문서의 원본은 2017년 06월 15일에 DaveJamesMiller.com 에서 포스팅되었습니다.&lt;/li>
&lt;li>이 문서는 원작자의 허가를 받아 번역되었습니다. Dave &amp;lt;&lt;a href="mailto:dave%40davejamesmiller.com">dave@davejamesmiller.com&lt;/a>&amp;gt;. 감사합니다.&lt;/li>
&lt;li>이 문서는 &lt;a href="https://github.com/hwajin-me">Hwajin Lee &amp;laquo;brightdelusion@gmail.com&amp;raquo;&lt;/a> 가 번역하였습니다.&lt;/li>
&lt;/ul></content></item></channel></rss>