<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Hwajin's Blog</title><link>https://blog.hwajin.me/ja/tags/development/</link><description>Recent content in Development on Hwajin's Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 04 Jul 2018 15:00:00 +0000</lastBuildDate><atom:link href="https://blog.hwajin.me/ja/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>ララベルの依存性注入(DI)コンテナ</title><link>https://blog.hwajin.me/ja/posts/2018/07/04/laravel-dependency-injection-container/</link><pubDate>Wed, 04 Jul 2018 15:00:00 +0000</pubDate><guid>https://blog.hwajin.me/ja/posts/2018/07/04/laravel-dependency-injection-container/</guid><description>&lt;p>&lt;a href="https://laravel.kr/">Laravel&lt;/a> 의 제어의 역전(Inversion of Control) / 의존성 주입 (Dependency Injection) 컨테이너는 매우 강력한 기능입니다. 안타깝게도, 라라벨의 &lt;a href="https://laravel.kr/docs/5.6/">공식 문서&lt;/a>는 이 기능의 모든 면을 설명하고 있지 않습니다. 그런 이유로 저는 직접 이 기능들을 실험하여 본 문서를 작성했습니다. 이 문서는 &lt;a href="https://github.com/laravel/framework/tree/5.4/src/Illuminate/Container">Laravel 5.4.26&lt;/a> 버전을 기준으로 작성되었으며, 그 외 버전은 기능이 다를 수 있습니다. &lt;strong>이 문서는 번역되었습니다.&lt;/strong> &lt;em>번역한 문서는 &lt;a href="https://gist.github.com/davejamesmiller/bd857d9b0ac895df7604dd2e63b23afe">이곳&lt;/a>을 클릭하시면 이동하실 수 있습니다.&lt;/em>&lt;/p>
&lt;h2 id="의존성-주입이란">의존성 주입이란&lt;/h2>
&lt;p>이 문서에서는 의존성 주입과 제어의 역전 원칙에 대해 설명하지 않습니다. 이것들에 대해 익숙하지 않으시다면 &lt;a href="http://fabien.potencier.org/what-is-dependency-injection.html">What is Dependency Injection?&lt;/a> by Fabien Potencier (&lt;a href="http://symfony.com/">Symfony&lt;/a> framework 의 메인테이너) 가 작성한 글을 참고하실 수 있습니다.&lt;/p></description><content>&lt;p>&lt;a href="https://laravel.kr/">Laravel&lt;/a> 의 제어의 역전(Inversion of Control) / 의존성 주입 (Dependency Injection) 컨테이너는 매우 강력한 기능입니다. 안타깝게도, 라라벨의 &lt;a href="https://laravel.kr/docs/5.6/">공식 문서&lt;/a>는 이 기능의 모든 면을 설명하고 있지 않습니다. 그런 이유로 저는 직접 이 기능들을 실험하여 본 문서를 작성했습니다. 이 문서는 &lt;a href="https://github.com/laravel/framework/tree/5.4/src/Illuminate/Container">Laravel 5.4.26&lt;/a> 버전을 기준으로 작성되었으며, 그 외 버전은 기능이 다를 수 있습니다. &lt;strong>이 문서는 번역되었습니다.&lt;/strong> &lt;em>번역한 문서는 &lt;a href="https://gist.github.com/davejamesmiller/bd857d9b0ac895df7604dd2e63b23afe">이곳&lt;/a>을 클릭하시면 이동하실 수 있습니다.&lt;/em>&lt;/p>
&lt;h2 id="의존성-주입이란">의존성 주입이란&lt;/h2>
&lt;p>이 문서에서는 의존성 주입과 제어의 역전 원칙에 대해 설명하지 않습니다. 이것들에 대해 익숙하지 않으시다면 &lt;a href="http://fabien.potencier.org/what-is-dependency-injection.html">What is Dependency Injection?&lt;/a> by Fabien Potencier (&lt;a href="http://symfony.com/">Symfony&lt;/a> framework 의 메인테이너) 가 작성한 글을 참고하실 수 있습니다.&lt;/p>
&lt;h2 id="컨테이너-접근">컨테이너 접근&lt;/h2>
&lt;p>라라벨의 컨테이너 인스턴스에 접근하는 방법은 여러가지가 있습니다. 그러나 가장 간단한 방법은 &lt;code>app()&lt;/code> 헬퍼 메소드를 호출하는 것입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 시간에는 다른 방법에 대해서는 따로 서술하지 않겠습니다. 그 대신, 컨테이너 클래스에 초점을 맞추어 보도록 하겠습니다.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> 공식 문서에서는 &lt;code>$container&lt;/code> 대신 &lt;code>$this-&amp;gt;app&lt;/code> 을 사용할 것입니다.&lt;/p>
&lt;p>(* 라라벨 어플리케이션에서 이것은 실제로 Application 이라는 Container 의 서브 클래스 입니다. 그러나 이 글에서는 Container 메소드에 대해서만 설명할 것입니다.)&lt;/p>
&lt;h3 id="외부에서-illuminatecontainer-를-사용">외부에서 Illuminate\Container 를 사용&lt;/h3>
&lt;p>라라벨 외부에서 컨테이너를 사용하고 싶으신 경우, &lt;a href="https://packagist.org/packages/illuminate/container">이것&lt;/a>을 설치하신 후, 아래와 같이 사용하실 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Illuminate\Container\Container&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="기본적인-사용법">기본적인 사용법&lt;/h3>
&lt;p>가장 간단한 방법은 의존성 주입을 원하는 클래스의 생성자에 타입 힌트를 사용하는 것입니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> * @var AnotherClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">AnotherClass&lt;/span> $dependency)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">dependency&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후 &lt;code>new MyClass&lt;/code> 를 사용하는 대신, 컨테이너의 &lt;code>make()&lt;/code> 메소드를 사용합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$instance &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">MyClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>컨테이너는 자동으로 의존성을 인스턴스화 할 것이며 이것은 실질적으로 아래와 동일합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$instance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">AnotherClass&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>AnotherClass&lt;/code> 가 다른 의존성을 가진 경우 컨테이너는 재귀적으로 의존성을 해결할 것입니다.&lt;/p>
&lt;h3 id="실용적인-예제">실용적인 예제&lt;/h3>
&lt;p>여기 조금 더 실용적인 예제가 있습니다. (based on &lt;a href="http://php-di.org/doc/getting-started.html">PHP-DI docs&lt;/a>)가 있습니다. - 회원 가입 기능에서 메일 기능을 분리하는 예제&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Mailer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">mail&lt;/span>($recipient, $content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Send an email to the recipient
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserManager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $mailer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Mailer&lt;/span> $mailer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mailer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $mailer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">register&lt;/span>($email, $password)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create the user account
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Send the user an email to say hello!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mailer&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">mail&lt;/span>($email, &lt;span style="color:#e6db74">&amp;#39;Hello and welcome!&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Illuminate\Container\Container&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$userManager &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">UserManager&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$userManager&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">register&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;dave@davejamesmiller.com&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;MySuperSecurePassword!&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="구현-객체에-인터페이스를-바인딩-하는-법">구현 객체에 인터페이스를 바인딩 하는 법&lt;/h2>
&lt;p>컨테이너를 이용하면 인터페이스와 구현체 (Impl)를 런타임시 쉽게 인스턴스화 할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">MyInterface&lt;/span> { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">AnotherInterface&lt;/span> { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후, 이 인터페이스들을 구현하는 클래스를 작성합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">MyInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">AnotherInterface&lt;/span> $dependency)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">dependency&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $dependency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그리고 &lt;code>bind()&lt;/code> 메소드를 사용하여 각 인터페이스를 구현체 (class)에 매핑합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">MyInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">MyClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">AnotherInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">AnotherClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막으로, &lt;code>make()&lt;/code> 메소드에 클래스 이름이 아닌 인터페이스 이름을 전달합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$instance &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">MyInterface&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> 만약 인터페이스 바인딩을 잊으셨다면 치명적인 오류가 발생합니다.&lt;/p>
&lt;pre tabindex="0">&lt;code>Fatal error: Uncaught ReflectionException: Class MyInterface does not exist
&lt;/code>&lt;/pre>&lt;p>왜냐하면 컨테이너는 &lt;code>new MyInterface&lt;/code>, 즉 인터페이스를 인스턴스화 하고자 할 것이기 때문입니다. 이것은 올바른 클래스가 아니죠.&lt;/p>
&lt;h3 id="실용적인-예제-1">실용적인 예제&lt;/h3>
&lt;p>변경 가능한 캐시 레이어를 구성해보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>($key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>($key, $value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RedisCache&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>($key) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">put&lt;/span>($key, $value) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Worker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> $cache;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $cache;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Use the cache for something...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> $result &lt;span style="color:#f92672">=&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">cache&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;worker&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($result &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">do_something_slow&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">cache&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;worker&amp;#39;&lt;/span>, $result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Illuminate\Container\Container&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">RedisCache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$result &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Worker&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="추상--구상-클래스-바인딩">추상 &amp;amp; 구상 클래스 바인딩&lt;/h2>
&lt;p>추상 클래스(abstract class) 또한 바인딩 할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">MyAbstract&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">MyConcreteClass&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 추상 클래스를 서브 클래스로 대체할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">CustomMySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="커스텀-바인딩">커스텀 바인딩&lt;/h2>
&lt;p>만약 클래스가 추가적인 설정을 요구한다면 클래스의 이름 대신 &lt;code>closure&lt;/code> 를 &lt;code>bind()&lt;/code> 메소드의 두 번째 매개 변수로 넘길 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>(&lt;span style="color:#a6e22e">MYSQL_HOST&lt;/span>, &lt;span style="color:#a6e22e">MYSQL_PORT&lt;/span>, &lt;span style="color:#a6e22e">MYSQL_USER&lt;/span>, &lt;span style="color:#a6e22e">MYSQL_PASS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>매 번 데이터베이스 인터페이스가 필요할 때 마다 새로운 MySQLDatabase 인스턴스가 생성되어 사용되며, 몇 가지 미리 지정된 구성값을 필요로 합니다. (단일 인스턴스를 공유하고자 한다면, 아래 &lt;em>싱글톤&lt;/em> 를 읽어주시기 바랍니다.)&lt;/p>
&lt;p>클로저는 컨테이너 인스턴스를 첫 번째 매개 변수로 받으며, 필요한 경우 다른 클래스를 인스턴스화 하는 데 사용하실 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $filesystem &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">FileLogger&lt;/span>($filesystem, &lt;span style="color:#e6db74">&amp;#39;logs/error.log&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클로저는 구상 클래스가 인스턴스화 하는 법을 따로 지정할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">GitHub\Client&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">GitHub\Client&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $client&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setEnterpriseUrl&lt;/span>(&lt;span style="color:#a6e22e">GITHUB_HOST&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $client;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="콜백-해결-컨테이너-이벤트httpslaravelkrdocs56containercontainer-events">콜백 해결 &lt;a href="https://laravel.kr/docs/5.6/container#container-events">(컨테이너 이벤트)&lt;/a>&lt;/h3>
&lt;p>바인딩을 완벽하게 오버라이딩 하는 대신, &lt;code>resolving()&lt;/code> 메소드를 이용하여 객체의 의존성을 해결할 때 콜백을 받으실 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#a6e22e">GitHub\Client&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($client, &lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $client&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setEnterpriseUrl&lt;/span>(&lt;span style="color:#a6e22e">GITHUB_HOST&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>콜백이 여러 개 존재한다면, 모든 콜백이 호출됩니다. 이 기능은 인터페이스나 추상 클래스에도 동일하게 동작합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Logger&lt;/span> $logger) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setLevel&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;debug&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#a6e22e">FileLogger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">FileLogger&lt;/span> $logger) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setFilename&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;logs/debug.log&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FileLogger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$logger &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또한 모든 의존성 해결에 있어서 콜백을 받을 수도 있습니다 (제 생각에는 Logging / Debugging 에만 유용할 것 같습니다)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolving&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> ($object, &lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="클래스-확장-바인딩-확장httpslaravelkrdocs56containerextending-bindings">클래스 확장 &lt;a href="https://laravel.kr/docs/5.6/container#extending-bindings">(바인딩 확장)&lt;/a>&lt;/h3>
&lt;p>&lt;code>extend()&lt;/code> 메소드를 사용하여 클래스를 감싸고 다른 객체로 반환시킬 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">extend&lt;/span>(&lt;span style="color:#a6e22e">APIClient&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($client, &lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">APIClientDecorator&lt;/span>($client);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>반환되는 객체는 여전히 같은 인터페이스를 구현해야 합니다. 그렇지 않으면 Type hinting 에서 에러가 발생할 것입니다.&lt;/p>
&lt;h2 id="싱글톤">싱글톤&lt;/h2>
&lt;p>자동 바인딩과 &lt;code>bind()&lt;/code> 메소드를 이용하면 필요할 때마다 새로운 인스턴스가 생성됩니다 (또는 클로저가 호출됩니다). 하나의 인스턴스를 공유하고자 한다면 &lt;code>bind()&lt;/code> 대신 &lt;code>singleton()&lt;/code> 을 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">RedisCache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 클로저를 사용할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;testdb&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;pass&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>구상 클래스를 싱글톤으로 생성하고자 한다면, 두 번째 매개 변수를 제외하고 전달합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 경우, 싱글톤 객체는 필요할 때 단 한 번 생성될 것입니다. 그리고 이후에는 이것을 재사용 할 것입니다. 재사용을 원하는 인스턴스가 이미 존재하는 경우, &lt;code>instance()&lt;/code> 메소드를 사용하시기 바랍니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#a6e22e">Container&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $container);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="임의의-바인딩-이름">임의의 바인딩 이름&lt;/h2>
&lt;p>클래스나 인터페이스 이름 대신 임의의 문자열을 사용할 수 있습니다. 타입 힌트는 사용할 수 없으며, &lt;code>make()&lt;/code> 메소드를 이용해야 합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>인터페이스와 클래스 모두 짧은 이름 기능을 지원하려면 &lt;code>alias()&lt;/code> 메소드를 사용해야 합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">RedisCache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">alias&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;cache&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$cache1 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$cache2 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;cache&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">assert&lt;/span>($cache1 &lt;span style="color:#f92672">===&lt;/span> $cache2);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="임의의-값-저장">임의의 값 저장&lt;/h2>
&lt;p>또한 컨테이너를 임의의 값을 저장하기 위해 사용할 수도 있습니다 (e.g. 설정 데이터)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;testdb&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db_name &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 방법은 배열 접근을 지원하고 있습니다. 조금 더 자연스러운 방식이죠&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container[&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;testdb&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db_name &lt;span style="color:#f92672">=&lt;/span> $container[&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클로저 바인딩과 같이 사용하면 왜 이것이 유용할 수 있는지 알 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.host&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.name&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container[&lt;span style="color:#e6db74">&amp;#39;database.pass&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>라라벨 자체는 컨테이너를 설정(구성)을 위해 사용하지 않습니다. 설정 파일은 &lt;a href="https://laravel.kr/docs/5.6/configuration">Config&lt;/a> 로 분리되어 있고 설정에 대한 부분은 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Config/Repository.php">&lt;code>Illuminate\Config\Repository&lt;/code>&lt;/a> 클래스에 존재합니다. 그러나 &lt;a href="http://php-di.org/doc/php-definitions.html#values">PHP-DI&lt;/a> 는 아닙니다.&lt;/p>
&lt;p>&lt;strong>Tip:&lt;/strong> 배열 구문은 &lt;code>make()&lt;/code> 메소드 대신 객체를 인스턴스화 할 때 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$db &lt;span style="color:#f92672">=&lt;/span> $container[&lt;span style="color:#e6db74">&amp;#39;database&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="함수와-메소드의-의존성-주입">함수와 메소드의 의존성 주입&lt;/h2>
&lt;p>우리는 지금까지 생성자를 통한 의존성 주입을 보았습니다. 그러나 라라벨은 함수에도 의존성 주입 기능을 제공합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">do_something&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$result &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;do_something&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>추가적인 매개 변수는 순서 또는 연관 배열로 전달할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">show_product&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache, $id, $tab &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;details&amp;#39;&lt;/span>) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// show_product($cache, 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// show_product($cache, 1, &amp;#39;spec&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;spec&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;show_product&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;tab&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;spec&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능은 Callable 메소드에 모두 적용할 수 있습니다.&lt;/p>
&lt;h4 id="closures">Closures&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$closure &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>($closure);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="static-methods">Static methods&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">staticMethod&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;SomeClass&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;staticMethod&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// or:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;SomeClass::staticMethod&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="instance-methods">Instance methods&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PostController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">show&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache, $id) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$controller &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">PostController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([$controller, &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([$controller, &lt;span style="color:#e6db74">&amp;#39;show&amp;#39;&lt;/span>], [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="인스턴스-메소드-호출을-위한-손쉬운-방법">인스턴스 메소드 호출을 위한 손쉬운 방법&lt;/h3>
&lt;p>클래스를 인스턴스화하고 바로 메소드를 호출하는 빠른 방법이 있습니다. &lt;code>ClassName@methodName&lt;/code> 을 사용하는 것입니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@show&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>컨테이너는 클래스를 인스턴스화하는 것에 이 기능을 사용합니다. 이것은 다음을 의미합니다&lt;/p>
&lt;ul>
&lt;li>의존성은 생성자를 통해 주입됩니다&lt;/li>
&lt;li>클래스를 재사용하고자 할 때 싱글톤으로 정의할 수 있습니다&lt;/li>
&lt;li>구상 클래스 대신 인터페이스 또는 임의의 이름을 사용할 수 있습니다&lt;/li>
&lt;/ul>
&lt;p>예를 들어, 아래와 같은 경우가 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PostController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Request&lt;/span> $request) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">Cache&lt;/span> $cache) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;post&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">PostController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;post@index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막으로, 세 번째 매개 변수로 &amp;ldquo;기본 메소드&amp;quot;를 전달할 수 있습니다. 만약 첫번째 매개 변수가 메소드가 따로 지정되어 있지 않은 클래스 이름인 경우, 기본 메소드가 대신 호출됩니다. 라라벨은 이 기능을 이용하여 &lt;a href="https://laravel.kr/docs/5.6/events#registering-events-and-listeners">이벤트 핸들러&lt;/a>를 구현합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">MyEventHandler&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $parameters, &lt;span style="color:#e6db74">&amp;#39;handle&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 위와 같음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;MyEventHandler@handle&amp;#39;&lt;/span>, $parameters);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="메소드-호출-바인딩">메소드 호출 바인딩&lt;/h3>
&lt;p>&lt;code>bindMethod()&lt;/code> 메소드는 메소드 호출을 오버라이드 할 수 있습니다. 예를 들어, 추가적인 매개 변수를 아래와 같이 전달할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bindMethod&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($controller, $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $posts &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">get_posts&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $controller&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">index&lt;/span>($posts);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능은 기존의 메소드 대신 클로저를 호출하여 동작합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController&amp;#39;&lt;/span>, [], &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>([&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PostController&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그러나 &lt;code>call()&lt;/code> 메소드에서 추가적인 매개 변수를 전달할 수는 없습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 사용할 수 없음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PostController@index&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;Not used :-(&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>Notes:&lt;/strong> 이 메소드는 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>에 존재하지 않습니다. &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Container/Container.php">컨테이너 클래스&lt;/a>에만 존재합니다. &lt;a href="https://github.com/laravel/framework/pull/16800">왜 매개 변수를 무시하는지 이유는 이곳에서 확인하실 수 있습니다&lt;/a>&lt;/em>&lt;/p>
&lt;h2 id="문맥에-따른-조건적-바인딩">문맥에 따른 조건적 바인딩&lt;/h2>
&lt;p>가끔 여러분은 각각의 클래스마다 다른 구현 객체를 전달하고자 할 수도 있습니다. 다음은 &lt;a href="https://laravel.kr/docs/5.6/container#contextual-binding">라라벨 공식 문서&lt;/a>에서 일부 수정된 예제입니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">PhotoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#a6e22e">LocalFilesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">VideoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#a6e22e">S3Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PhotoController&lt;/code> 와 &lt;code>VideoController&lt;/code> 는 &lt;code>Filesystem&lt;/code> 인터페이스에 의존적일 수 있지만, 서로 다른 구현체를 받게 됩니다. &lt;code>bind()&lt;/code> 와 같이 &lt;code>give()&lt;/code> 에서도 클로저를 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">VideoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Storage&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">disk&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;s3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 이름(문자열)을 통해 의존성을 주입할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;s3&amp;#39;&lt;/span>, $s3Filesystem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">VideoController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#a6e22e">Filesystem&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;s3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="기본-타입-바인딩">기본 타입 바인딩&lt;/h3>
&lt;p>여러분은 또한 기본 타입들(string, integer..) 를 &lt;code>needs()&lt;/code> 메소드를 통해 주입할 수 있습니다 (인터페이스 대신). 그리고 &lt;code>give()&lt;/code> 메소드를 통해 값들을 전달할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;$username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#a6e22e">DB_USER&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클로저를 통해 값이 필요할 때 까지 값을 가지고 오는 것을 늦출 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;$username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>여기서 여러분은 클래스나 또는 의존성 이름을 사용할 수 없습니다 (e.g. &lt;code>give('database.user')&lt;/code>). 왜냐하면, 이 값은 리터럴 값으로 반환되기 때문입니다. 대신 클로저를 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>(&lt;span style="color:#a6e22e">MySQLDatabase&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">needs&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;$username&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">give&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="태깅-tagginghttpslaravelkrdocs56containertagging">태깅 &lt;a href="https://laravel.kr/docs/5.6/container#tagging">(Tagging)&lt;/a>&lt;/h2>
&lt;p>컨테이너를 사용하여 관련된 바인딩을 &amp;ldquo;태그&amp;quot;할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>(&lt;span style="color:#a6e22e">MyPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>(&lt;span style="color:#a6e22e">AnotherPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후 태그가 지정된 모든 인스턴스를 배열로 받아올 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tagged&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> $plugin) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $plugin&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">init&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>tag()&lt;/code> 메소드의 매개 변수는 배열도 사용할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>([&lt;span style="color:#a6e22e">MyPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">AnotherPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">tag&lt;/span>(&lt;span style="color:#a6e22e">MyPlugin&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;plugin&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plugin.admin&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="재바인딩-rebinding">재바인딩 (Rebinding)&lt;/h2>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 이 기능은 조금 더 고급 기능이며, 대부분의 경우 이 기능을 필요로 하지 않습니다. 원하신다면 이 부분을 넘기셔도 괜찮습니다!&lt;/em>&lt;/p>
&lt;p>바인딩 또는 인스턴스가 사용된 후 변경될 때 &lt;code>rebinding()&lt;/code> 콜백이 호출됩니다. 예를 들어 세션 클래스가 Auth 클래스에 의해 사용된 후 변경된다면, Auth 클래스는 변경 사실을 알아야 합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">rebinding&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> ($container, $session) &lt;span style="color:#66d9ef">use&lt;/span> ($auth) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($session);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Session&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dave&amp;#39;&lt;/span>]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$auth &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>(); &lt;span style="color:#75715e">// dave
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Session&lt;/span>([&lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;danny&amp;#39;&lt;/span>]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>(); &lt;span style="color:#75715e">// danny
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>재바인딩에 대해 더 자세한 내용은 &lt;a href="https://stackoverflow.com/questions/38974593/laravels-ioc-container-rebinding-abstract-types">이곳&lt;/a>과 &lt;a href="https://code.tutsplus.com/tutorials/digging-in-to-laravels-ioc-container--cms-22167">이곳&lt;/a>을 참고해 주시기 바랍니다.&lt;/p>
&lt;h3 id="refresh">refresh()&lt;/h3>
&lt;p>이 기능을 더 쉽게 사용하고자 할 때, &lt;code>refresh()&lt;/code> 메소드를 사용할 수 있습니다. 이것은 아래와 같은 일반적인 패턴을 다루고자 할 때 사용합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">refresh&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $auth, &lt;span style="color:#e6db74">&amp;#39;setSession&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또한 이 기능은 이미 존재하는 인스턴스나 바인딩을 반환하므로, 아래와 같이 코드를 작성할 수도 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Auth&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Container&lt;/span> $container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $auth&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">setSession&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">refresh&lt;/span>(&lt;span style="color:#a6e22e">Session&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, $auth, &lt;span style="color:#e6db74">&amp;#39;setSession&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(개인적으로 저는 이 구문이 더 혼란스럽고 위의 좀 더 자세한 방법을 선호합니다)&lt;/p>
&lt;p>&lt;em>&lt;strong>Notes:&lt;/strong> 이 메소드는 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>에 존재하지 않습니다. &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Container/Container.php">컨테이너 클래스&lt;/a>에만 존재합니다.&lt;/em>&lt;/p>
&lt;h2 id="생성자-매개-변수-오버라이딩">생성자 매개 변수 오버라이딩&lt;/h2>
&lt;p>&lt;code>makeWith()&lt;/code> 메소드는 생성자 매개 변수에 추가적인 값을 전달할 수 있습니다. 기존에 존재하는 인스턴스나 싱글톤을 무시하고 종속성을 주입하면서 다른 매개 변수로 클래스의 인스턴스를 생성할 때 유용하게 사용될 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Post&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(&lt;span style="color:#a6e22e">Database&lt;/span> $db, &lt;span style="color:#a6e22e">int&lt;/span> $id) { &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$post1 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">makeWith&lt;/span>(&lt;span style="color:#a6e22e">Post&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$post2 &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">makeWith&lt;/span>(&lt;span style="color:#a6e22e">Post&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 라라벨 5.3 이하에서는 간단하게 &lt;code>make($class, $pameters)&lt;/code> 로 사용했었습니다. 라라벨 5.4에서 이 기능은 삭제되어 &lt;code>makeWith() &lt;/code> 로 추가되었습니다. 그러나, 라라벨 5.5 에서는 다시 라라벨 5.3과 같이 사용할 수 있습니다.&lt;/em>&lt;/p>
&lt;h2 id="그-외-메소드">그 외 메소드&lt;/h2>
&lt;p>그 외 유용하다고 생각하는 모든 메소드를 다루고자 합니다. 이 내용으로 충분하지 않다면 아래 퍼블릭 메소드를 참고하실 수 있습니다.&lt;/p>
&lt;h3 id="bound">bound()&lt;/h3>
&lt;p>&lt;code>bound()&lt;/code> 메소드는 &lt;code>bind()&lt;/code>, &lt;code>singleton()&lt;/code>, &lt;code>instance()&lt;/code>, &lt;code>alias()&lt;/code> 메소드에 의해 클래스 또는 이름(문자열)이 바운딩 되었을 때 &lt;code>true&lt;/code> 를 반환합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bound&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>배열 접근 구문과 &lt;code>isset()&lt;/code>를 사용할 수도 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> &lt;span style="color:#a6e22e">isset&lt;/span>($container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>])) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>unset()&lt;/code> 함수를 통해 제거될 수 있으며, 지정된 바인딩 / 인스턴스 / 별칭을 제거합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">unset&lt;/span>($container[&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bound&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;database.user&amp;#39;&lt;/span>)); &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bindif">bindIf()&lt;/h3>
&lt;p>&lt;code>bindIf()&lt;/code> 는 바인딩이 존재하지 않는 경우에만 바인딩을 하는 메소드 입니다. 동작 자체는 &lt;code>bind()&lt;/code> 와 동일하게 동작합니다. (위의 &lt;code>bound()&lt;/code> 참고)&lt;/p>
&lt;p>이것은 잠재적으로 사용자의 오버라이드를 허용하여 패키지의 기본 바인딩을 등록하게끔 사용될 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bindIf&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FallbackLoader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그러나 &lt;code>singletonIf()&lt;/code> 메소드는 없습니다. 대신, &lt;code>bindIf($abstract, $concrete, true)&lt;/code> 를 통해 동일한 기능을 사용할 수 있습니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bindIf&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FallbackLoader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는 아래와 같은 방법도 가능합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">bound&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">singleton&lt;/span>(&lt;span style="color:#a6e22e">Loader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#a6e22e">FallbackLoader&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="resolved">resolved()&lt;/h3>
&lt;p>&lt;code>resolved()&lt;/code> 메소드는 의존성 문제가 이전에 해결된 경우 &lt;code>true&lt;/code> 를 반환합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolved&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)); &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">make&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolved&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)); &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>저는 이 기능이 유용할 것인지 확신하지 못하겠습니다.. &lt;code>unset()&lt;/code> 을 사용하면 재설정이 이루어지는데 말이죠 (위의 &lt;code>bound()&lt;/code> 참고)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">unset&lt;/span>($container[&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">var_dump&lt;/span>($container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">resolved&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>)); &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="factory">factory()&lt;/h3>
&lt;p>&lt;code>factory()&lt;/code> 메소드는 매개 변수가 존재하지 않고 &lt;code>make()&lt;/code> 를 호출하는 클로저를 반환합니다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$dbFactory &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">factory&lt;/span>(&lt;span style="color:#a6e22e">Database&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$db &lt;span style="color:#f92672">=&lt;/span> $dbFactory();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능이 언제 쓸모가 있을 지 모르겠네요.&lt;/p>
&lt;h3 id="wrap">wrap()&lt;/h3>
&lt;p>&lt;code>wrap()&lt;/code> 메소드는 클로저가 실행될 때 종속성이 주입되도록 클로저를 래핑합니다. wrap 메소드는 매개 변수 배열을 사용할 수 있으며 반환된 클로저에는 매개 변수가 없습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>$cacheGetter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Cache&lt;/span> $cache, $key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> $cache&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>($key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$usernameGetter &lt;span style="color:#f92672">=&lt;/span> $container&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">wrap&lt;/span>($cacheGetter, [&lt;span style="color:#e6db74">&amp;#39;username&amp;#39;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$username &lt;span style="color:#f92672">=&lt;/span> $usernameGetter();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 기능이 언제 쓸모가 있을 지 모르겠네요. (2)&lt;/p>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 이 메소드는 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>에 존재하지 않습니다. &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Container/Container.php">컨테이너 클래스&lt;/a>에만 존재합니다.&lt;/em>&lt;/p>
&lt;h3 id="afterresolving">afterResolving()&lt;/h3>
&lt;p>&lt;code>afterResolving()&lt;/code> 은 &lt;code>resolving()&lt;/code> 콜백 후에 &lt;code>afterResolving()&lt;/code> 콜백을 호출한다는 점을 제외하면 &lt;code>resolving()&lt;/code> 과 동일합니다. 이 기능이 언제 쓸모가 있을 지 모르겠네요.&lt;/p>
&lt;h3 id="마지막으로">마지막으로..&lt;/h3>
&lt;ul>
&lt;li>&lt;code>isShared()&lt;/code> : 주어진 타입이 공유된 싱글톤인지 인스턴스인지 알아냅니다.&lt;/li>
&lt;li>&lt;code>isAlias()&lt;/code> : 주어진 문자열이 등록된 별칭(alias)인지 알아냅니다.&lt;/li>
&lt;li>&lt;code>hasMethodBinding()&lt;/code> : 컨테이너가 주어진 바인딩을 가지고 있는지 알아냅니다.&lt;/li>
&lt;li>&lt;code>getBindings()&lt;/code> : 등록된 모든 바인딩을 원시 배열의 형태로 가져옵니다.&lt;/li>
&lt;li>&lt;code>getAlias($abstract)&lt;/code> : 기본 클래스와 바인딩 이름에 대한 별칭을 해결(Resolves) 합니다.&lt;/li>
&lt;li>&lt;code>forgetInstance($abstract)&lt;/code> : 단일 인스턴스 객체(싱글톤)를 지웁니다.&lt;/li>
&lt;li>&lt;code>forgetInstances()&lt;/code> 모든 인스턴스 객체를 지웁니다.&lt;/li>
&lt;li>&lt;code>flush()&lt;/code> : 모든 바인딩과 인스턴스를 지우고 컨테이너를 리셋합니다 (effectively resetting the container).&lt;/li>
&lt;li>&lt;code>setInstance()&lt;/code> : &lt;code>getInstance()&lt;/code> 에서 사용된 인스턴스를 대체합니다. (Tip: &lt;code>setInstance(null)&lt;/code> 을 이용해서 이것을 지우면 다음에 새로운 인스턴스가 생성됩니다.)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong> 마지막 부분의 메소드들은 &lt;a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Contracts/Container/Container.php">컨테이너 인터페이스&lt;/a>의 일부가 아닙니다.&lt;/em>&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>이 문서의 원본은 2017년 06월 15일에 DaveJamesMiller.com 에서 포스팅되었습니다.&lt;/li>
&lt;li>이 문서는 원작자의 허가를 받아 번역되었습니다. Dave &amp;lt;&lt;a href="mailto:dave%40davejamesmiller.com">dave@davejamesmiller.com&lt;/a>&amp;gt;. 감사합니다.&lt;/li>
&lt;li>이 문서는 &lt;a href="https://github.com/hwajin-me">Hwajin Lee &amp;laquo;brightdelusion@gmail.com&amp;raquo;&lt;/a> 가 번역하였습니다.&lt;/li>
&lt;/ul></content></item></channel></rss>